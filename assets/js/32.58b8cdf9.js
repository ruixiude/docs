(window.webpackJsonp=window.webpackJsonp||[]).push([[32],{391:function(e,t,a){"use strict";a.r(t);var s=a(42),n=Object(s.a)({},(function(){var e=this,t=e.$createElement,a=e._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[a("h1",{attrs:{id:"modelling-entities"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#modelling-entities"}},[e._v("#")]),e._v(" Modelling entities")]),e._v(" "),a("p",[e._v("To use greenDAO in a project you create an entity model representing the persistent data in your application. Then, based on this model greenDAO generates Java code for the DAO classes.")]),e._v(" "),a("p",[a("img",{attrs:{src:"https://cdn-bcjmb.nitrocdn.com/TnSylzMAaqTUpyZGFJFCauZdmmedkCXh/assets/static/optimized/rev-dbfe93e/wordpress/wp-content/uploads/Meta-Model-180.png",alt:"img"}})]),e._v(" "),a("p",[e._v("The model itself is defined using Java classes with annotations.")]),e._v(" "),a("p",[a("em",[e._v("To use the legacy generator to create your schema, see "),a("a",{attrs:{href:"http://greenrobot.org/greendao/documentation/generator/",target:"_blank",rel:"noopener noreferrer"}},[e._v("Generator"),a("OutboundLink")],1),e._v(".")])]),e._v(" "),a("p",[a("em",[e._v("The illustration on the right depicts the meta model that greenDAO is based on.")])]),e._v(" "),a("h2",{attrs:{id:"schema"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#schema"}},[e._v("#")]),e._v(" Schema")]),e._v(" "),a("p",[e._v("You can get started with the greenDAO Gradle plugin without any additional configuration. Though, you should consider setting at least the schema version:")]),e._v(" "),a("div",{staticClass:"language-java line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[e._v("// In the build.gradle file of your app project:")]),e._v("\nandroid "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("{")]),e._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),e._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("}")]),e._v("\n \ngreendao "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("{")]),e._v("\n    schemaVersion "),a("span",{pre:!0,attrs:{class:"token number"}},[e._v("2")]),e._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[e._v('// daoPackage "com.example.model" // set package of generated classes')]),e._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("}")]),e._v("\n")])]),e._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[e._v("1")]),a("br"),a("span",{staticClass:"line-number"},[e._v("2")]),a("br"),a("span",{staticClass:"line-number"},[e._v("3")]),a("br"),a("span",{staticClass:"line-number"},[e._v("4")]),a("br"),a("span",{staticClass:"line-number"},[e._v("5")]),a("br"),a("span",{staticClass:"line-number"},[e._v("6")]),a("br"),a("span",{staticClass:"line-number"},[e._v("7")]),a("br"),a("span",{staticClass:"line-number"},[e._v("8")]),a("br"),a("span",{staticClass:"line-number"},[e._v("9")]),a("br")])]),a("p",[e._v("Furthermore, the "),a("strong",[e._v("greendao")]),e._v(" configuration element supports a host of configuration options:")]),e._v(" "),a("ul",[a("li",[a("strong",[e._v("schemaVersion:")]),e._v(" The current version of the database schema. This is used by the *OpenHelpers classes to migrate between schema versions. If you change your entity/database schema, this value has to be increased. "),a("em",[e._v("Defaults to 1.")])]),e._v(" "),a("li",[a("strong",[e._v("daoPackage")]),e._v(": The package name for generated DAOs, DaoMaster, and DaoSession. "),a("em",[e._v("Defaults to the package name of your source entities.")])]),e._v(" "),a("li",[a("strong",[e._v("targetGenDir:")]),e._v(" The location where generated sources should be stored at. "),a("em",[e._v("Defaults to the generated source folder inside the build directory")]),e._v(" ( build/generated/source/greendao).")]),e._v(" "),a("li",[a("strong",[e._v("generateTests:")]),e._v(" Set to true to automatically generate unit tests.")]),e._v(" "),a("li",[a("strong",[e._v("targetGenDirTests:")]),e._v(" The base directory where generated unit tests should be stored at. "),a("em",[e._v("Defaults to src/androidTest/java")]),e._v(".")])]),e._v(" "),a("h2",{attrs:{id:"entities-and-annotations"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#entities-and-annotations"}},[e._v("#")]),e._v(" Entities and Annotations")]),e._v(" "),a("p",[e._v("greenDAO 3 uses annotations to define schemas and entities. Here is a quick example:")]),e._v(" "),a("div",{staticClass:"language-java line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[e._v("@Entity")]),e._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("public")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("class")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[e._v("User")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("{")]),e._v("\n    "),a("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[e._v("@Id")]),e._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("private")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[e._v("Long")]),e._v(" id"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(";")]),e._v("\n \n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("private")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[e._v("String")]),e._v(" name"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(";")]),e._v("\n \n    "),a("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[e._v("@Transient")]),e._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("private")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("int")]),e._v(" tempUsageCount"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(";")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[e._v("// not persisted")]),e._v("\n \n   "),a("span",{pre:!0,attrs:{class:"token comment"}},[e._v("// getters and setters for id and user ...")]),e._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("}")]),e._v("\n")])]),e._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[e._v("1")]),a("br"),a("span",{staticClass:"line-number"},[e._v("2")]),a("br"),a("span",{staticClass:"line-number"},[e._v("3")]),a("br"),a("span",{staticClass:"line-number"},[e._v("4")]),a("br"),a("span",{staticClass:"line-number"},[e._v("5")]),a("br"),a("span",{staticClass:"line-number"},[e._v("6")]),a("br"),a("span",{staticClass:"line-number"},[e._v("7")]),a("br"),a("span",{staticClass:"line-number"},[e._v("8")]),a("br"),a("span",{staticClass:"line-number"},[e._v("9")]),a("br"),a("span",{staticClass:"line-number"},[e._v("10")]),a("br"),a("span",{staticClass:"line-number"},[e._v("11")]),a("br"),a("span",{staticClass:"line-number"},[e._v("12")]),a("br")])]),a("p",[e._v("The "),a("strong",[e._v("@Entity")]),e._v(" annotation turns the Java class User into a database-backed entity. This will also instruct greenDAO to generate the necessary code (for example DAOs).")]),e._v(" "),a("p",[a("em",[e._v("Note: only Java classes are supported. If you prefer another language like Kotlin, your entity classes must still be Java.")])]),e._v(" "),a("h3",{attrs:{id:"the-entity-annotation"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#the-entity-annotation"}},[e._v("#")]),e._v(" The @Entity Annotation")]),e._v(" "),a("p",[e._v("As you saw in the example above, the "),a("strong",[e._v("@Entity")]),e._v(" annotation marks a Java class as a presistable entity for greenDAO.")]),e._v(" "),a("p",[e._v("While it is usually fine to go without any additional parameters, you can still configure some details using "),a("strong",[e._v("@Entity")]),e._v(":")]),e._v(" "),a("div",{staticClass:"language-java line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[e._v("@Entity")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),e._v("\n        "),a("span",{pre:!0,attrs:{class:"token comment"}},[e._v("// If you have more than one schema, you can tell greenDAO")]),e._v("\n        "),a("span",{pre:!0,attrs:{class:"token comment"}},[e._v("// to which schema an entity belongs (pick any string as a name).")]),e._v("\n        schema "),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[e._v('"myschema"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v("\n        \n        "),a("span",{pre:!0,attrs:{class:"token comment"}},[e._v('// Flag to make an entity "active": Active entities have update,')]),e._v("\n        "),a("span",{pre:!0,attrs:{class:"token comment"}},[e._v("// delete, and refresh methods.")]),e._v("\n        active "),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[e._v("true")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v("\n        \n        "),a("span",{pre:!0,attrs:{class:"token comment"}},[e._v("// Specifies the name of the table in the database.")]),e._v("\n        "),a("span",{pre:!0,attrs:{class:"token comment"}},[e._v("// By default, the name is based on the entities class name.")]),e._v("\n        nameInDb "),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[e._v('"AWESOME_USERS"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v("\n        \n        "),a("span",{pre:!0,attrs:{class:"token comment"}},[e._v("// Define indexes spanning multiple columns here.")]),e._v("\n        indexes "),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("{")]),e._v("\n                "),a("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[e._v("@Index")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),e._v("value "),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[e._v('"name DESC"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v(" unique "),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[e._v("true")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v("\n        "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v("\n        \n        "),a("span",{pre:!0,attrs:{class:"token comment"}},[e._v("// Flag if the DAO should create the database table (default is true).")]),e._v("\n        "),a("span",{pre:!0,attrs:{class:"token comment"}},[e._v("// Set this to false, if you have multiple entities mapping to one table,")]),e._v("\n        "),a("span",{pre:!0,attrs:{class:"token comment"}},[e._v("// or the table creation is done outside of greenDAO.")]),e._v("\n        createInDb "),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[e._v("false")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v("\n \n        "),a("span",{pre:!0,attrs:{class:"token comment"}},[e._v("// Whether an all properties constructor should be generated.")]),e._v("\n        "),a("span",{pre:!0,attrs:{class:"token comment"}},[e._v("// A no-args constructor is always required.")]),e._v("\n        generateConstructors "),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[e._v("true")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v("\n \n        "),a("span",{pre:!0,attrs:{class:"token comment"}},[e._v("// Whether getters and setters for properties should be generated if missing.")]),e._v("\n        generateGettersSetters "),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[e._v("true")]),e._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("public")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("class")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[e._v("User")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("{")]),e._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),e._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("}")]),e._v("\n")])]),e._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[e._v("1")]),a("br"),a("span",{staticClass:"line-number"},[e._v("2")]),a("br"),a("span",{staticClass:"line-number"},[e._v("3")]),a("br"),a("span",{staticClass:"line-number"},[e._v("4")]),a("br"),a("span",{staticClass:"line-number"},[e._v("5")]),a("br"),a("span",{staticClass:"line-number"},[e._v("6")]),a("br"),a("span",{staticClass:"line-number"},[e._v("7")]),a("br"),a("span",{staticClass:"line-number"},[e._v("8")]),a("br"),a("span",{staticClass:"line-number"},[e._v("9")]),a("br"),a("span",{staticClass:"line-number"},[e._v("10")]),a("br"),a("span",{staticClass:"line-number"},[e._v("11")]),a("br"),a("span",{staticClass:"line-number"},[e._v("12")]),a("br"),a("span",{staticClass:"line-number"},[e._v("13")]),a("br"),a("span",{staticClass:"line-number"},[e._v("14")]),a("br"),a("span",{staticClass:"line-number"},[e._v("15")]),a("br"),a("span",{staticClass:"line-number"},[e._v("16")]),a("br"),a("span",{staticClass:"line-number"},[e._v("17")]),a("br"),a("span",{staticClass:"line-number"},[e._v("18")]),a("br"),a("span",{staticClass:"line-number"},[e._v("19")]),a("br"),a("span",{staticClass:"line-number"},[e._v("20")]),a("br"),a("span",{staticClass:"line-number"},[e._v("21")]),a("br"),a("span",{staticClass:"line-number"},[e._v("22")]),a("br"),a("span",{staticClass:"line-number"},[e._v("23")]),a("br"),a("span",{staticClass:"line-number"},[e._v("24")]),a("br"),a("span",{staticClass:"line-number"},[e._v("25")]),a("br"),a("span",{staticClass:"line-number"},[e._v("26")]),a("br"),a("span",{staticClass:"line-number"},[e._v("27")]),a("br"),a("span",{staticClass:"line-number"},[e._v("28")]),a("br"),a("span",{staticClass:"line-number"},[e._v("29")]),a("br"),a("span",{staticClass:"line-number"},[e._v("30")]),a("br"),a("span",{staticClass:"line-number"},[e._v("31")]),a("br"),a("span",{staticClass:"line-number"},[e._v("32")]),a("br"),a("span",{staticClass:"line-number"},[e._v("33")]),a("br")])]),a("p",[a("em",[e._v("Note that "),a("strong",[e._v("multiple schemas are "),a("a",{attrs:{href:"https://github.com/greenrobot/greenDAO/issues/356",target:"_blank",rel:"noopener noreferrer"}},[e._v("currently not supported when using the Gradle plugin"),a("OutboundLink")],1)]),e._v(". For the time being, continue to use your "),a("a",{attrs:{href:"http://greenrobot.org/greendao/documentation/generator/",target:"_blank",rel:"noopener noreferrer"}},[e._v("generator"),a("OutboundLink")],1),e._v(" project.")])]),e._v(" "),a("h3",{attrs:{id:"basic-properties"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#basic-properties"}},[e._v("#")]),e._v(" Basic properties")]),e._v(" "),a("div",{staticClass:"language-java line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[e._v("@Entity")]),e._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("public")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("class")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[e._v("User")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("{")]),e._v("\n    "),a("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[e._v("@Id")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),e._v("autoincrement "),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[e._v("true")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("private")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[e._v("Long")]),e._v(" id"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(";")]),e._v("\n \n    "),a("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[e._v("@Property")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),e._v("nameInDb "),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[e._v('"USERNAME"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("private")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[e._v("String")]),e._v(" name"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(";")]),e._v("\n \n    "),a("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[e._v("@NotNull")]),e._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("private")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("int")]),e._v(" repos"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(";")]),e._v("\n \n    "),a("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[e._v("@Transient")]),e._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("private")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("int")]),e._v(" tempUsageCount"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(";")]),e._v("\n \n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),e._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("}")]),e._v("\n")])]),e._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[e._v("1")]),a("br"),a("span",{staticClass:"line-number"},[e._v("2")]),a("br"),a("span",{staticClass:"line-number"},[e._v("3")]),a("br"),a("span",{staticClass:"line-number"},[e._v("4")]),a("br"),a("span",{staticClass:"line-number"},[e._v("5")]),a("br"),a("span",{staticClass:"line-number"},[e._v("6")]),a("br"),a("span",{staticClass:"line-number"},[e._v("7")]),a("br"),a("span",{staticClass:"line-number"},[e._v("8")]),a("br"),a("span",{staticClass:"line-number"},[e._v("9")]),a("br"),a("span",{staticClass:"line-number"},[e._v("10")]),a("br"),a("span",{staticClass:"line-number"},[e._v("11")]),a("br"),a("span",{staticClass:"line-number"},[e._v("12")]),a("br"),a("span",{staticClass:"line-number"},[e._v("13")]),a("br"),a("span",{staticClass:"line-number"},[e._v("14")]),a("br"),a("span",{staticClass:"line-number"},[e._v("15")]),a("br"),a("span",{staticClass:"line-number"},[e._v("16")]),a("br")])]),a("p",[e._v("The "),a("strong",[e._v("@Id")]),e._v(" annotation selects a "),a("strong",[e._v("long")]),e._v("/ "),a("strong",[e._v("Long")]),e._v(" property as the entity ID. In database terms, it’s the primary key. The parameter "),a("strong",[e._v("autoincrement")]),e._v(" is a flag to make the ID value ever increasing (not reusing old values).")]),e._v(" "),a("p",[a("strong",[e._v("@Property")]),e._v(" lets you define a non-default column name, which the property is mapped to. If absent, greenDAO will use the field name in a SQL-ish fashion (upper case, underscores instead of camel case, for example customName will become CUSTOM_NAME). "),a("em",[e._v("Note: you currently can only use inline constants to specify a column name.")])]),e._v(" "),a("p",[a("strong",[e._v("@NotNull")]),e._v(" makes the property a “NOT NULL” column on the database side. Usually it makes sense to mark primitive types (long, int, short, byte) with @NotNull, while having nullable values with wrapper classes (Long, Integer, Short, Byte).")]),e._v(" "),a("p",[a("strong",[e._v("@Transient")]),e._v(" marks properties to be excluded from persistence. Use those for temporary states, etc. Alternatively, you can also use the "),a("strong",[e._v("transient")]),e._v(" keyword from Java.")]),e._v(" "),a("h3",{attrs:{id:"primary-key-restrictions"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#primary-key-restrictions"}},[e._v("#")]),e._v(" Primary key restrictions")]),e._v(" "),a("p",[e._v("Currently, entities must have a "),a("strong",[e._v("long")]),e._v(" or "),a("strong",[e._v("Long")]),e._v(" property as their primary key. This is recommended practice for "),a("a",{attrs:{href:"http://developer.android.com/reference/android/widget/CursorAdapter.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("Android"),a("OutboundLink")],1),e._v(" and "),a("a",{attrs:{href:"http://www.sqlite.org/autoinc.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("SQLite"),a("OutboundLink")],1),e._v(".")]),e._v(" "),a("p",[e._v("To work around this, define your key property as an additional property, but create a unique index for it:")]),e._v(" "),a("div",{staticClass:"language-java line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[e._v("@Id")]),e._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("private")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[e._v("Long")]),e._v(" id"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(";")]),e._v("\n \n"),a("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[e._v("@Index")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),e._v("unique "),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[e._v("true")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("private")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[e._v("String")]),e._v(" key"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(";")]),e._v("\n")])]),e._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[e._v("1")]),a("br"),a("span",{staticClass:"line-number"},[e._v("2")]),a("br"),a("span",{staticClass:"line-number"},[e._v("3")]),a("br"),a("span",{staticClass:"line-number"},[e._v("4")]),a("br"),a("span",{staticClass:"line-number"},[e._v("5")]),a("br")])]),a("h3",{attrs:{id:"property-indexes"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#property-indexes"}},[e._v("#")]),e._v(" Property indexes")]),e._v(" "),a("p",[e._v("Use "),a("strong",[e._v("@Index")]),e._v(" at a property to create a database index for the corresponding database column. Use the following parameters to customize:")]),e._v(" "),a("ul",[a("li",[a("strong",[e._v("name:")]),e._v(" If you do not like the default name greenDAO generates for the index, you can specify yours here.")]),e._v(" "),a("li",[a("strong",[e._v("unique:")]),e._v(" Adds a UNIQUE constraint to the index, forcing all values to be unique.")])]),e._v(" "),a("div",{staticClass:"language-java line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[e._v("@Entity")]),e._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("public")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("class")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[e._v("User")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("{")]),e._v("\n    "),a("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[e._v("@Id")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("private")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[e._v("Long")]),e._v(" id"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(";")]),e._v("\n    "),a("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[e._v("@Index")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),e._v("unique "),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[e._v("true")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("private")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[e._v("String")]),e._v(" name"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(";")]),e._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("}")]),e._v("\n")])]),e._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[e._v("1")]),a("br"),a("span",{staticClass:"line-number"},[e._v("2")]),a("br"),a("span",{staticClass:"line-number"},[e._v("3")]),a("br"),a("span",{staticClass:"line-number"},[e._v("4")]),a("br"),a("span",{staticClass:"line-number"},[e._v("5")]),a("br"),a("span",{staticClass:"line-number"},[e._v("6")]),a("br")])]),a("p",[a("strong",[e._v("@Unique")]),e._v(" adds a UNIQUE constraint to the database column. Note, that SQLite also implicitly creates an index for it.")]),e._v(" "),a("div",{staticClass:"language-java line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[e._v("@Entity")]),e._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("public")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("class")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[e._v("User")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("{")]),e._v("\n    "),a("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[e._v("@Id")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("private")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[e._v("Long")]),e._v(" id"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(";")]),e._v("\n    "),a("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[e._v("@Unique")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("private")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[e._v("String")]),e._v(" name"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(";")]),e._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("}")]),e._v("\n")])]),e._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[e._v("1")]),a("br"),a("span",{staticClass:"line-number"},[e._v("2")]),a("br"),a("span",{staticClass:"line-number"},[e._v("3")]),a("br"),a("span",{staticClass:"line-number"},[e._v("4")]),a("br"),a("span",{staticClass:"line-number"},[e._v("5")]),a("br")])]),a("p",[a("em",[e._v("Note: To add an index spanning multiple properties, see the "),a("a",{attrs:{href:"https://greenrobot.org/greendao/documentation/modelling-entities/#The_Entity_Annotation",target:"_blank",rel:"noopener noreferrer"}},[e._v("documentation for the @Entity annotation"),a("OutboundLink")],1),e._v(".")])]),e._v(" "),a("h2",{attrs:{id:"defaults"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#defaults"}},[e._v("#")]),e._v(" Defaults")]),e._v(" "),a("p",[e._v("greenDAO tries to work with reasonable defaults, so developers don’t have to configure each and every bit.")]),e._v(" "),a("p",[e._v("For example the table and column name on the database side are derived from the entity and property names. Instead of the camel case style used in Java, the default database names are in uppercase using an underscore to separate word.")]),e._v(" "),a("p",[e._v("For example, a property called creationDate will become a database column CREATION_DATE.")]),e._v(" "),a("h2",{attrs:{id:"relations"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#relations"}},[e._v("#")]),e._v(" Relations")]),e._v(" "),a("p",[e._v("To learn how to add to-one and to-many relations see "),a("a",{attrs:{href:"http://greenrobot.org/documentation/relations/",target:"_blank",rel:"noopener noreferrer"}},[e._v("Relations"),a("OutboundLink")],1),e._v(".")]),e._v(" "),a("h2",{attrs:{id:"triggering-generation"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#triggering-generation"}},[e._v("#")]),e._v(" Triggering generation")]),e._v(" "),a("p",[e._v("Once your entity schema is in place, you can trigger the code generation process by using "),a("em",[e._v("“Make project”")]),e._v(" in your IDE. Or by directly executing the greendao Gradle task.")]),e._v(" "),a("p",[a("em",[e._v("If you encounter errors after changing your entity classes, try to rebuild your project to make sure old generated classes are cleaned.")])]),e._v(" "),a("h2",{attrs:{id:"modifying-generated-code"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#modifying-generated-code"}},[e._v("#")]),e._v(" Modifying generated code")]),e._v(" "),a("p",[e._v("Entity classes in greenDAO 3 are created and edited by the developer. However, during the code generation process "),a("strong",[e._v("greenDAO may augment the source code of entities")]),e._v(".")]),e._v(" "),a("p",[e._v("greenDAO will add a "),a("strong",[e._v("@Generated")]),e._v(" annotation to methods and fields it created, to inform the developer and to prevent any loss of code. "),a("strong",[e._v("In most cases, you should not have to touch code annotated with @Generated.")])]),e._v(" "),a("p",[e._v("As a precaution, greenDAO will not overwrite existing code and raise an error if generated code was manually changed:")]),e._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("Error:Execution failed for task ':app:greendao'.\n> Constructor (see ExampleEntity:21) has been changed after generation.\nPlease either mark it with @Keep annotation instead of @Generated to keep it untouched,\nor use @Generated (without hash) to allow to replace it.\n")])]),e._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[e._v("1")]),a("br"),a("span",{staticClass:"line-number"},[e._v("2")]),a("br"),a("span",{staticClass:"line-number"},[e._v("3")]),a("br"),a("span",{staticClass:"line-number"},[e._v("4")]),a("br")])]),a("p",[e._v("As the error message implies, there are usually two ways to resolve this:")]),e._v(" "),a("ul",[a("li",[e._v("Revert the changes to code annotated with "),a("strong",[e._v("@Generated")]),e._v(". Alternatively, you can also delete the changed constructor or method completely. They will be regenerated with the next build.")]),e._v(" "),a("li",[e._v("Replace the "),a("strong",[e._v("@Generated")]),e._v(" annotation with a "),a("strong",[e._v("@Keep")]),e._v(" annotation. This will tell greenDAO to never touch the annotated code. Keep in mind that your changes might break the contract between the entity and the rest of greenDAO. Also, future releases of greenDAO might expect different code in generated methods. So, be cautious! It’s a good idea to have unit tests in place to avoid trouble.")])]),e._v(" "),a("h3",{attrs:{id:"keep-sections"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#keep-sections"}},[e._v("#")]),e._v(" Keep sections")]),e._v(" "),a("p",[e._v("KEEP sections used in older versions of greenDAO are no longer supported.")]),e._v(" "),a("p",[e._v("However, if the Gradle plugin detects a KEEP FIELDS section it will automatically annotate fields inside with "),a("strong",[e._v("@Transient")]),e._v(". Afterwards, the surrounding KEEP FIELDS comments may be removed.")])])}),[],!1,null,null,null);t.default=n.exports}}]);