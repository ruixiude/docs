(window.webpackJsonp=window.webpackJsonp||[]).push([[127],{507:function(e,t,r){"use strict";r.r(t);var a=r(42),o=Object(a.a)({},(function(){var e=this,t=e.$createElement,r=e._self._c||t;return r("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[r("h1",{attrs:{id:"alphabetical-list-of-observable-operators"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#alphabetical-list-of-observable-operators"}},[e._v("#")]),e._v(" Alphabetical List of Observable Operators")]),e._v(" "),r("ul",[r("li",[r("strong",[r("code",[e._v("aggregate( )")])]),e._v(" — "),r("em",[e._v("see "),r("a",{attrs:{href:"https://github.com/ReactiveX/RxJava/wiki/Mathematical-and-Aggregate-Operators#reduce",target:"_blank",rel:"noopener noreferrer"}},[r("strong",[r("code",[e._v("reduce( )")])]),r("OutboundLink")],1)])]),e._v(" "),r("li",[r("a",{attrs:{href:"https://github.com/ReactiveX/RxJava/wiki/Conditional-and-Boolean-Operators#boolean-operators",target:"_blank",rel:"noopener noreferrer"}},[r("strong",[r("code",[e._v("all( )")])]),r("OutboundLink")],1),e._v(" — determine whether all items emitted by an Observable meet some criteria")]),e._v(" "),r("li",[r("a",{attrs:{href:"https://github.com/ReactiveX/RxJava/wiki/Conditional-and-Boolean-Operators#conditional-operators",target:"_blank",rel:"noopener noreferrer"}},[r("strong",[r("code",[e._v("amb( )")])]),r("OutboundLink")],1),e._v(" — given two or more source Observables, emits all of the items from the first of these Observables to emit an item")]),e._v(" "),r("li",[r("strong",[r("code",[e._v("ambWith( )")])]),e._v(" — "),r("em",[e._v("instance version of "),r("a",{attrs:{href:"https://github.com/ReactiveX/RxJava/wiki/Conditional-and-Boolean-Operators#conditional-operators",target:"_blank",rel:"noopener noreferrer"}},[r("strong",[r("code",[e._v("amb( )")])]),r("OutboundLink")],1)])]),e._v(" "),r("li",[r("a",{attrs:{href:"https://github.com/ReactiveX/RxJava/wiki/Combining-Observables#and-then-and-when",target:"_blank",rel:"noopener noreferrer"}},[r("strong",[r("code",[e._v("and( )")])]),r("OutboundLink")],1),e._v(" — combine the emissions from two or more source Observables into a "),r("code",[e._v("Pattern")]),e._v(" ("),r("code",[e._v("rxjava-joins")]),e._v(")")]),e._v(" "),r("li",[r("strong",[r("code",[e._v("apply( )")])]),e._v(" (scala) — "),r("em",[e._v("see "),r("a",{attrs:{href:"https://github.com/ReactiveX/RxJava/wiki/Creating-Observables#create",target:"_blank",rel:"noopener noreferrer"}},[r("strong",[r("code",[e._v("create( )")])]),r("OutboundLink")],1)])]),e._v(" "),r("li",[r("strong",[r("code",[e._v("asObservable( )")])]),e._v(" (kotlin) — "),r("em",[e._v("see "),r("a",{attrs:{href:"https://github.com/ReactiveX/RxJava/wiki/Creating-Observables#from",target:"_blank",rel:"noopener noreferrer"}},[r("strong",[r("code",[e._v("from( )")])]),r("OutboundLink")],1),e._v(" (et al.)")])]),e._v(" "),r("li",[r("a",{attrs:{href:"https://github.com/ReactiveX/RxJava/wiki/Async-Operators#toasync-or-asyncaction-or-asyncfunc",target:"_blank",rel:"noopener noreferrer"}},[r("strong",[r("code",[e._v("asyncAction( )")])]),r("OutboundLink")],1),e._v(" — convert an Action into an Observable that executes the Action and emits its return value ("),r("code",[e._v("rxjava-async")]),e._v(")")]),e._v(" "),r("li",[r("a",{attrs:{href:"https://github.com/ReactiveX/RxJava/wiki/Async-Operators#toasync-or-asyncaction-or-asyncfunc",target:"_blank",rel:"noopener noreferrer"}},[r("strong",[r("code",[e._v("asyncFunc( )")])]),r("OutboundLink")],1),e._v(" — convert a function into an Observable that executes the function and emits its return value ("),r("code",[e._v("rxjava-async")]),e._v(")")]),e._v(" "),r("li",[r("a",{attrs:{href:"https://github.com/ReactiveX/RxJava/wiki/Mathematical-and-Aggregate-Operators#averagedouble",target:"_blank",rel:"noopener noreferrer"}},[r("strong",[r("code",[e._v("averageDouble( )")])]),r("OutboundLink")],1),e._v(" — calculates the average of Doubles emitted by an Observable and emits this average ("),r("code",[e._v("rxjava-math")]),e._v(")")]),e._v(" "),r("li",[r("a",{attrs:{href:"https://github.com/ReactiveX/RxJava/wiki/Mathematical-and-Aggregate-Operators#averagefloat",target:"_blank",rel:"noopener noreferrer"}},[r("strong",[r("code",[e._v("averageFloat( )")])]),r("OutboundLink")],1),e._v(" — calculates the average of Floats emitted by an Observable and emits this average ("),r("code",[e._v("rxjava-math")]),e._v(")")]),e._v(" "),r("li",[r("a",{attrs:{href:"https://github.com/ReactiveX/RxJava/wiki/Mathematical-and-Aggregate-Operators",target:"_blank",rel:"noopener noreferrer"}},[r("strong",[r("code",[e._v("averageInteger( )")])]),r("OutboundLink")],1),e._v(" — calculates the average of Integers emitted by an Observable and emits this average ("),r("code",[e._v("rxjava-math")]),e._v(")")]),e._v(" "),r("li",[r("a",{attrs:{href:"https://github.com/ReactiveX/RxJava/wiki/Mathematical-and-Aggregate-Operators",target:"_blank",rel:"noopener noreferrer"}},[r("strong",[r("code",[e._v("averageLong( )")])]),r("OutboundLink")],1),e._v(" — calculates the average of Longs emitted by an Observable and emits this average ("),r("code",[e._v("rxjava-math")]),e._v(")")]),e._v(" "),r("li",[r("strong",[r("code",[e._v("blocking( )")])]),e._v(" (clojure) — "),r("em",[e._v("see "),r("a",{attrs:{href:"https://github.com/ReactiveX/RxJava/wiki/Blocking-Observable-Operators",target:"_blank",rel:"noopener noreferrer"}},[r("strong",[r("code",[e._v("toBlocking( )")])]),r("OutboundLink")],1)])]),e._v(" "),r("li",[r("a",{attrs:{href:"https://github.com/ReactiveX/RxJava/wiki/Transforming-Observables#buffer",target:"_blank",rel:"noopener noreferrer"}},[r("strong",[r("code",[e._v("buffer( )")])]),r("OutboundLink")],1),e._v(" — periodically gather items from an Observable into bundles and emit these bundles rather than emitting the items one at a time")]),e._v(" "),r("li",[r("a",{attrs:{href:"https://github.com/ReactiveX/RxJava/wiki/String-Observables",target:"_blank",rel:"noopener noreferrer"}},[r("strong",[r("code",[e._v("byLine( )")])]),r("OutboundLink")],1),e._v(" ("),r("code",[e._v("StringObservable")]),e._v(") — converts an Observable of Strings into an Observable of Lines by treating the source sequence as a stream and splitting it on line-endings")]),e._v(" "),r("li",[r("a",{attrs:{href:"https://github.com/ReactiveX/RxJava/wiki/Observable-Utility-Operators",target:"_blank",rel:"noopener noreferrer"}},[r("strong",[r("code",[e._v("cache( )")])]),r("OutboundLink")],1),e._v(" — remember the sequence of items emitted by the Observable and emit the same sequence to future Subscribers")]),e._v(" "),r("li",[r("a",{attrs:{href:"https://github.com/ReactiveX/RxJava/wiki/Transforming-Observables#cast",target:"_blank",rel:"noopener noreferrer"}},[r("strong",[r("code",[e._v("cast( )")])]),r("OutboundLink")],1),e._v(" — cast all items from the source Observable into a particular type before reemitting them")]),e._v(" "),r("li",[r("strong",[r("code",[e._v("catch( )")])]),e._v(" (clojure) — "),r("em",[e._v("see "),r("a",{attrs:{href:"https://github.com/ReactiveX/RxJava/wiki/Error-Handling-Operators#onerrorresumenext",target:"_blank",rel:"noopener noreferrer"}},[r("strong",[r("code",[e._v("onErrorResumeNext( )")])]),r("OutboundLink")],1)])]),e._v(" "),r("li",[r("a",{attrs:{href:"https://github.com/ReactiveX/RxJava/wiki/Phantom-Operators#chunkify",target:"_blank",rel:"noopener noreferrer"}},[r("strong",[r("code",[e._v("chunkify( )")])]),r("OutboundLink")],1),e._v(" — returns an iterable that periodically returns a list of items emitted by the source Observable since the last list (⁇)")]),e._v(" "),r("li",[r("a",{attrs:{href:"https://github.com/ReactiveX/RxJava/wiki/Mathematical-and-Aggregate-Operators#collect",target:"_blank",rel:"noopener noreferrer"}},[r("strong",[r("code",[e._v("collect( )")])]),r("OutboundLink")],1),e._v(" — collects items emitted by the source Observable into a single mutable data structure and returns an Observable that emits this structure")]),e._v(" "),r("li",[r("a",{attrs:{href:"https://github.com/ReactiveX/RxJava/wiki/Combining-Observables#combinelatest",target:"_blank",rel:"noopener noreferrer"}},[r("strong",[r("code",[e._v("combineLatest( )")])]),r("OutboundLink")],1),e._v(" — when an item is emitted by either of two Observables, combine the latest item emitted by each Observable via a specified function and emit items based on the results of this function")]),e._v(" "),r("li",[r("strong",[r("code",[e._v("combineLatestWith( )")])]),e._v(" (scala) — "),r("em",[e._v("instance version of "),r("a",{attrs:{href:"https://github.com/ReactiveX/RxJava/wiki/Combining-Observables#combinelatest",target:"_blank",rel:"noopener noreferrer"}},[r("strong",[r("code",[e._v("combineLatest( )")])]),r("OutboundLink")],1)])]),e._v(" "),r("li",[r("a",{attrs:{href:"http://reactivex.io/documentation/operators/concat.html",target:"_blank",rel:"noopener noreferrer"}},[r("strong",[r("code",[e._v("concat( )")])]),r("OutboundLink")],1),e._v(" — concatenate two or more Observables sequentially")]),e._v(" "),r("li",[r("a",{attrs:{href:"https://github.com/ReactiveX/RxJava/wiki/Transforming-Observables#concatmap",target:"_blank",rel:"noopener noreferrer"}},[r("strong",[r("code",[e._v("concatMap( )")])]),r("OutboundLink")],1),e._v(" — transform the items emitted by an Observable into Observables, then flatten this into a single Observable, without interleaving")]),e._v(" "),r("li",[r("strong",[r("code",[e._v("concatWith( )")])]),e._v(" — "),r("em",[e._v("instance version of "),r("a",{attrs:{href:"http://reactivex.io/documentation/operators/concat.html",target:"_blank",rel:"noopener noreferrer"}},[r("strong",[r("code",[e._v("concat( )")])]),r("OutboundLink")],1)])]),e._v(" "),r("li",[r("a",{attrs:{href:"https://github.com/ReactiveX/RxJava/wiki/Connectable-Observable-Operators",target:"_blank",rel:"noopener noreferrer"}},[r("strong",[r("code",[e._v("connect( )")])]),r("OutboundLink")],1),e._v(" — instructs a Connectable Observable to begin emitting items")]),e._v(" "),r("li",[r("strong",[r("code",[e._v("cons( )")])]),e._v(" (clojure) — "),r("em",[e._v("see "),r("a",{attrs:{href:"http://reactivex.io/documentation/operators/concat.html",target:"_blank",rel:"noopener noreferrer"}},[r("strong",[r("code",[e._v("concat( )")])]),r("OutboundLink")],1)])]),e._v(" "),r("li",[r("a",{attrs:{href:"https://github.com/ReactiveX/RxJava/wiki/Conditional-and-Boolean-Operators#boolean-operators",target:"_blank",rel:"noopener noreferrer"}},[r("strong",[r("code",[e._v("contains( )")])]),r("OutboundLink")],1),e._v(" — determine whether an Observable emits a particular item or not")]),e._v(" "),r("li",[r("a",{attrs:{href:"https://github.com/ReactiveX/RxJava/wiki/Mathematical-and-Aggregate-Operators#count",target:"_blank",rel:"noopener noreferrer"}},[r("strong",[r("code",[e._v("count( )")])]),r("OutboundLink")],1),e._v(" — counts the number of items emitted by an Observable and emits this count")]),e._v(" "),r("li",[r("a",{attrs:{href:"https://github.com/ReactiveX/RxJava/wiki/Mathematical-and-Aggregate-Operators#count",target:"_blank",rel:"noopener noreferrer"}},[r("strong",[r("code",[e._v("countLong( )")])]),r("OutboundLink")],1),e._v(" — counts the number of items emitted by an Observable and emits this count")]),e._v(" "),r("li",[r("a",{attrs:{href:"https://github.com/ReactiveX/RxJava/wiki/Creating-Observables#create",target:"_blank",rel:"noopener noreferrer"}},[r("strong",[r("code",[e._v("create( )")])]),r("OutboundLink")],1),e._v(" — create an Observable from scratch by means of a function")]),e._v(" "),r("li",[r("strong",[r("code",[e._v("cycle( )")])]),e._v(" (clojure) — "),r("em",[e._v("see "),r("a",{attrs:{href:"https://github.com/ReactiveX/RxJava/wiki/Creating-Observables",target:"_blank",rel:"noopener noreferrer"}},[r("strong",[r("code",[e._v("repeat( )")])]),r("OutboundLink")],1)])]),e._v(" "),r("li",[r("a",{attrs:{href:"https://github.com/ReactiveX/RxJava/wiki/Filtering-Observables#debounce",target:"_blank",rel:"noopener noreferrer"}},[r("strong",[r("code",[e._v("debounce( )")])]),r("OutboundLink")],1),e._v(" — only emit an item from the source Observable after a particular timespan has passed without the Observable emitting any other items")]),e._v(" "),r("li",[r("a",{attrs:{href:"https://github.com/ReactiveX/RxJava/wiki/String-Observables",target:"_blank",rel:"noopener noreferrer"}},[r("strong",[r("code",[e._v("decode( )")])]),r("OutboundLink")],1),e._v(" ("),r("code",[e._v("StringObservable")]),e._v(") — convert a stream of multibyte characters into an Observable that emits byte arrays that respect character boundaries")]),e._v(" "),r("li",[r("a",{attrs:{href:"https://github.com/ReactiveX/RxJava/wiki/Conditional-and-Boolean-Operators#conditional-operators",target:"_blank",rel:"noopener noreferrer"}},[r("strong",[r("code",[e._v("defaultIfEmpty( )")])]),r("OutboundLink")],1),e._v(" — emit items from the source Observable, or emit a default item if the source Observable completes after emitting no items")]),e._v(" "),r("li",[r("a",{attrs:{href:"https://github.com/ReactiveX/RxJava/wiki/Creating-Observables#defer",target:"_blank",rel:"noopener noreferrer"}},[r("strong",[r("code",[e._v("defer( )")])]),r("OutboundLink")],1),e._v(" — do not create the Observable until a Subscriber subscribes; create a fresh Observable on each subscription")]),e._v(" "),r("li",[r("a",{attrs:{href:"https://github.com/ReactiveX/RxJava/wiki/Async-Operators",target:"_blank",rel:"noopener noreferrer"}},[r("strong",[r("code",[e._v("deferFuture( )")])]),r("OutboundLink")],1),e._v(" — convert a Future that returns an Observable into an Observable, but do not attempt to get the Observable that the Future returns until a Subscriber subscribes ("),r("code",[e._v("rxjava-async")]),e._v(")")]),e._v(" "),r("li",[r("a",{attrs:{href:"https://github.com/ReactiveX/RxJava/wiki/Phantom-Operators#fromcancellablefuture-startcancellablefuture-and-defercancellablefuture",target:"_blank",rel:"noopener noreferrer"}},[r("strong",[r("code",[e._v("deferCancellableFuture( )")])]),r("OutboundLink")],1),e._v(" — convert a Future that returns an Observable into an Observable in a way that monitors the subscription status of the Observable to determine whether to halt work on the Future, but do not attempt to get the returned Observable until a Subscriber subscribes (⁇)("),r("code",[e._v("rxjava-async")]),e._v(")")]),e._v(" "),r("li",[r("a",{attrs:{href:"https://github.com/ReactiveX/RxJava/wiki/Observable-Utility-Operators",target:"_blank",rel:"noopener noreferrer"}},[r("strong",[r("code",[e._v("delay( )")])]),r("OutboundLink")],1),e._v(" — shift the emissions from an Observable forward in time by a specified amount")]),e._v(" "),r("li",[r("a",{attrs:{href:"https://github.com/ReactiveX/RxJava/wiki/Observable-Utility-Operators",target:"_blank",rel:"noopener noreferrer"}},[r("strong",[r("code",[e._v("dematerialize( )")])]),r("OutboundLink")],1),e._v(" — convert a materialized Observable back into its non-materialized form")]),e._v(" "),r("li",[r("a",{attrs:{href:"https://github.com/ReactiveX/RxJava/wiki/Filtering-Observables#distinct",target:"_blank",rel:"noopener noreferrer"}},[r("strong",[r("code",[e._v("distinct( )")])]),r("OutboundLink")],1),e._v(" — suppress duplicate items emitted by the source Observable")]),e._v(" "),r("li",[r("a",{attrs:{href:"https://github.com/ReactiveX/RxJava/wiki/Filtering-Observables#distinctuntilchanged",target:"_blank",rel:"noopener noreferrer"}},[r("strong",[r("code",[e._v("distinctUntilChanged( )")])]),r("OutboundLink")],1),e._v(" — suppress duplicate consecutive items emitted by the source Observable")]),e._v(" "),r("li",[r("strong",[r("code",[e._v("do( )")])]),e._v(" (clojure) — "),r("em",[e._v("see "),r("a",{attrs:{href:"https://github.com/ReactiveX/RxJava/wiki/Observable-Utility-Operators",target:"_blank",rel:"noopener noreferrer"}},[r("strong",[r("code",[e._v("doOnEach( )")])]),r("OutboundLink")],1)])]),e._v(" "),r("li",[r("a",{attrs:{href:"https://github.com/ReactiveX/RxJava/wiki/Observable-Utility-Operators",target:"_blank",rel:"noopener noreferrer"}},[r("strong",[r("code",[e._v("doOnCompleted( )")])]),r("OutboundLink")],1),e._v(" — register an action to take when an Observable completes successfully")]),e._v(" "),r("li",[r("a",{attrs:{href:"https://github.com/ReactiveX/RxJava/wiki/Observable-Utility-Operators",target:"_blank",rel:"noopener noreferrer"}},[r("strong",[r("code",[e._v("doOnEach( )")])]),r("OutboundLink")],1),e._v(" — register an action to take whenever an Observable emits an item")]),e._v(" "),r("li",[r("a",{attrs:{href:"https://github.com/ReactiveX/RxJava/wiki/Observable-Utility-Operators",target:"_blank",rel:"noopener noreferrer"}},[r("strong",[r("code",[e._v("doOnError( )")])]),r("OutboundLink")],1),e._v(" — register an action to take when an Observable completes with an error")]),e._v(" "),r("li",[r("strong",[r("code",[e._v("doOnNext( )")])]),e._v(" — "),r("em",[e._v("see "),r("a",{attrs:{href:"https://github.com/ReactiveX/RxJava/wiki/Observable-Utility-Operators",target:"_blank",rel:"noopener noreferrer"}},[r("strong",[r("code",[e._v("doOnEach( )")])]),r("OutboundLink")],1)])]),e._v(" "),r("li",[r("strong",[r("code",[e._v("doOnRequest( )")])]),e._v(" — register an action to take when items are requested from an Observable via reactive-pull backpressure (⁇)")]),e._v(" "),r("li",[r("a",{attrs:{href:"https://github.com/ReactiveX/RxJava/wiki/Observable-Utility-Operators",target:"_blank",rel:"noopener noreferrer"}},[r("strong",[r("code",[e._v("doOnSubscribe( )")])]),r("OutboundLink")],1),e._v(" — register an action to take when an observer subscribes to an Observable")]),e._v(" "),r("li",[r("a",{attrs:{href:"https://github.com/ReactiveX/RxJava/wiki/Observable-Utility-Operators",target:"_blank",rel:"noopener noreferrer"}},[r("strong",[r("code",[e._v("doOnTerminate( )")])]),r("OutboundLink")],1),e._v(" — register an action to take when an Observable completes, either successfully or with an error")]),e._v(" "),r("li",[r("a",{attrs:{href:"https://github.com/ReactiveX/RxJava/wiki/Observable-Utility-Operators",target:"_blank",rel:"noopener noreferrer"}},[r("strong",[r("code",[e._v("doOnUnsubscribe( )")])]),r("OutboundLink")],1),e._v(" — register an action to take when an observer unsubscribes from an Observable")]),e._v(" "),r("li",[r("a",{attrs:{href:"https://github.com/ReactiveX/RxJava/wiki/Conditional-and-Boolean-Operators",target:"_blank",rel:"noopener noreferrer"}},[r("strong",[r("code",[e._v("doWhile( )")])]),r("OutboundLink")],1),e._v(" — emit the source Observable's sequence, and then repeat the sequence as long as a condition remains true ("),r("code",[e._v("contrib-computation-expressions")]),e._v(")")]),e._v(" "),r("li",[r("strong",[r("code",[e._v("drop( )")])]),e._v(" (scala/clojure) — "),r("em",[e._v("see "),r("a",{attrs:{href:"https://github.com/ReactiveX/RxJava/wiki/Filtering-Observables#skip",target:"_blank",rel:"noopener noreferrer"}},[r("strong",[r("code",[e._v("skip( )")])]),r("OutboundLink")],1)])]),e._v(" "),r("li",[r("strong",[r("code",[e._v("dropRight( )")])]),e._v(" (scala) — "),r("em",[e._v("see "),r("a",{attrs:{href:"https://github.com/ReactiveX/RxJava/wiki/Filtering-Observables#skiplast",target:"_blank",rel:"noopener noreferrer"}},[r("strong",[r("code",[e._v("skipLast( )")])]),r("OutboundLink")],1)])]),e._v(" "),r("li",[r("strong",[r("code",[e._v("dropUntil( )")])]),e._v(" (scala) — "),r("em",[e._v("see "),r("a",{attrs:{href:"https://github.com/ReactiveX/RxJava/wiki/Conditional-and-Boolean-Operators",target:"_blank",rel:"noopener noreferrer"}},[r("strong",[r("code",[e._v("skipUntil( )")])]),r("OutboundLink")],1)])]),e._v(" "),r("li",[r("strong",[r("code",[e._v("dropWhile( )")])]),e._v(" (scala) — "),r("em",[e._v("see "),r("a",{attrs:{href:"https://github.com/ReactiveX/RxJava/wiki/Conditional-and-Boolean-Operators",target:"_blank",rel:"noopener noreferrer"}},[r("strong",[r("code",[e._v("skipWhile( )")])]),r("OutboundLink")],1)])]),e._v(" "),r("li",[r("strong",[r("code",[e._v("drop-while( )")])]),e._v(" (clojure) — "),r("em",[e._v("see "),r("a",{attrs:{href:"https://github.com/ReactiveX/RxJava/wiki/Conditional-and-Boolean-Operators#skipwhile",target:"_blank",rel:"noopener noreferrer"}},[r("strong",[r("code",[e._v("skipWhile( )")])]),r("OutboundLink")],1)])]),e._v(" "),r("li",[r("a",{attrs:{href:"https://github.com/ReactiveX/RxJava/wiki/Filtering-Observables#elementat",target:"_blank",rel:"noopener noreferrer"}},[r("strong",[r("code",[e._v("elementAt( )")])]),r("OutboundLink")],1),e._v(" — emit item "),r("em",[e._v("n")]),e._v(" emitted by the source Observable")]),e._v(" "),r("li",[r("a",{attrs:{href:"https://github.com/ReactiveX/RxJava/wiki/Filtering-Observables",target:"_blank",rel:"noopener noreferrer"}},[r("strong",[r("code",[e._v("elementAtOrDefault( )")])]),r("OutboundLink")],1),e._v(" — emit item "),r("em",[e._v("n")]),e._v(" emitted by the source Observable, or a default item if the source Observable emits fewer than "),r("em",[e._v("n")]),e._v(" items")]),e._v(" "),r("li",[r("a",{attrs:{href:"https://github.com/ReactiveX/RxJava/wiki/Creating-Observables#empty",target:"_blank",rel:"noopener noreferrer"}},[r("strong",[r("code",[e._v("empty( )")])]),r("OutboundLink")],1),e._v(" — create an Observable that emits nothing and then completes")]),e._v(" "),r("li",[r("a",{attrs:{href:"https://github.com/ReactiveX/RxJava/wiki/String-Observables",target:"_blank",rel:"noopener noreferrer"}},[r("strong",[r("code",[e._v("encode( )")])]),r("OutboundLink")],1),e._v(" ("),r("code",[e._v("StringObservable")]),e._v(") — transform an Observable that emits strings into an Observable that emits byte arrays that respect character boundaries of multibyte characters in the original strings")]),e._v(" "),r("li",[r("a",{attrs:{href:"https://github.com/ReactiveX/RxJava/wiki/Creating-Observables#error",target:"_blank",rel:"noopener noreferrer"}},[r("strong",[r("code",[e._v("error( )")])]),r("OutboundLink")],1),e._v(" — create an Observable that emits nothing and then signals an error")]),e._v(" "),r("li",[r("strong",[r("code",[e._v("every( )")])]),e._v(" (clojure) — "),r("em",[e._v("see "),r("a",{attrs:{href:"https://github.com/ReactiveX/RxJava/wiki/Conditional-and-Boolean-Operators#boolean-operators",target:"_blank",rel:"noopener noreferrer"}},[r("strong",[r("code",[e._v("all( )")])]),r("OutboundLink")],1)])]),e._v(" "),r("li",[r("a",{attrs:{href:"https://github.com/ReactiveX/RxJava/wiki/Conditional-and-Boolean-Operators#boolean-operators",target:"_blank",rel:"noopener noreferrer"}},[r("strong",[r("code",[e._v("exists( )")])]),r("OutboundLink")],1),e._v(" — determine whether an Observable emits any items or not")]),e._v(" "),r("li",[r("a",{attrs:{href:"https://github.com/ReactiveX/RxJava/wiki/Filtering-Observables#filter",target:"_blank",rel:"noopener noreferrer"}},[r("strong",[r("code",[e._v("filter( )")])]),r("OutboundLink")],1),e._v(" — filter items emitted by an Observable")]),e._v(" "),r("li",[r("strong",[r("code",[e._v("finally( )")])]),e._v(" (clojure) — "),r("em",[e._v("see "),r("a",{attrs:{href:"https://github.com/ReactiveX/RxJava/wiki/Observable-Utility-Operators",target:"_blank",rel:"noopener noreferrer"}},[r("strong",[r("code",[e._v("finallyDo( )")])]),r("OutboundLink")],1)])]),e._v(" "),r("li",[r("strong",[r("code",[e._v("filterNot( )")])]),e._v(" (scala) — "),r("em",[e._v("see "),r("a",{attrs:{href:"https://github.com/ReactiveX/RxJava/wiki/Filtering-Observables#filter",target:"_blank",rel:"noopener noreferrer"}},[r("strong",[r("code",[e._v("filter( )")])]),r("OutboundLink")],1)])]),e._v(" "),r("li",[r("a",{attrs:{href:"https://github.com/ReactiveX/RxJava/wiki/Observable-Utility-Operators",target:"_blank",rel:"noopener noreferrer"}},[r("strong",[r("code",[e._v("finallyDo( )")])]),r("OutboundLink")],1),e._v(" — register an action to take when an Observable completes")]),e._v(" "),r("li",[r("a",{attrs:{href:"https://github.com/ReactiveX/RxJava/wiki/Filtering-Observables#first",target:"_blank",rel:"noopener noreferrer"}},[r("strong",[r("code",[e._v("first( )")])]),r("OutboundLink")],1),e._v(" ("),r("code",[e._v("Observable")]),e._v(") — emit only the first item emitted by an Observable, or the first item that meets some condition")]),e._v(" "),r("li",[r("a",{attrs:{href:"https://github.com/ReactiveX/RxJava/wiki/Blocking-Observable-Operators",target:"_blank",rel:"noopener noreferrer"}},[r("strong",[r("code",[e._v("first( )")])]),r("OutboundLink")],1),e._v(" ("),r("code",[e._v("BlockingObservable")]),e._v(") — emit only the first item emitted by an Observable, or the first item that meets some condition")]),e._v(" "),r("li",[r("a",{attrs:{href:"https://github.com/ReactiveX/RxJava/wiki/Filtering-Observables",target:"_blank",rel:"noopener noreferrer"}},[r("strong",[r("code",[e._v("firstOrDefault( )")])]),r("OutboundLink")],1),e._v(" ("),r("code",[e._v("Observable")]),e._v(") — emit only the first item emitted by an Observable, or the first item that meets some condition, or a default value if the source Observable is empty")]),e._v(" "),r("li",[r("a",{attrs:{href:"https://github.com/ReactiveX/RxJava/wiki/Blocking-Observable-Operators",target:"_blank",rel:"noopener noreferrer"}},[r("strong",[r("code",[e._v("firstOrDefault( )")])]),r("OutboundLink")],1),e._v(" ("),r("code",[e._v("BlockingObservable")]),e._v(") — emit only the first item emitted by an Observable, or the first item that meets some condition, or a default value if the source Observable is empty")]),e._v(" "),r("li",[r("strong",[r("code",[e._v("firstOrElse( )")])]),e._v(" (scala) — "),r("em",[e._v("see "),r("a",{attrs:{href:"https://github.com/ReactiveX/RxJava/wiki/Filtering-Observables",target:"_blank",rel:"noopener noreferrer"}},[r("strong",[r("code",[e._v("firstOrDefault( )")])]),r("OutboundLink")],1),e._v(" or "),r("a",{attrs:{href:"https://github.com/ReactiveX/RxJava/wiki/Blocking-Observable-Operators",target:"_blank",rel:"noopener noreferrer"}},[r("strong",[r("code",[e._v("firstOrDefault( )")])]),r("OutboundLink")],1),e._v(" ("),r("code",[e._v("BlockingObservable")]),e._v(")")])]),e._v(" "),r("li",[r("a",{attrs:{href:"https://github.com/ReactiveX/RxJava/wiki/Transforming-Observables#flatmap",target:"_blank",rel:"noopener noreferrer"}},[r("strong",[r("code",[e._v("flatMap( )")])]),r("OutboundLink")],1),e._v(" — transform the items emitted by an Observable into Observables, then flatten this into a single Observable")]),e._v(" "),r("li",[r("a",{attrs:{href:"https://github.com/ReactiveX/RxJava/wiki/Transforming-Observables#flatmapiterable",target:"_blank",rel:"noopener noreferrer"}},[r("strong",[r("code",[e._v("flatMapIterable( )")])]),r("OutboundLink")],1),e._v(" — create Iterables corresponding to each emission from a source Observable and merge the results into a single Observable")]),e._v(" "),r("li",[r("strong",[r("code",[e._v("flatMapIterableWith( )")])]),e._v(" (scala) — "),r("em",[e._v("instance version of "),r("a",{attrs:{href:"https://github.com/ReactiveX/RxJava/wiki/Transforming-Observables#flatmapiterable",target:"_blank",rel:"noopener noreferrer"}},[r("strong",[r("code",[e._v("flatMapIterable( )")])]),r("OutboundLink")],1)])]),e._v(" "),r("li",[r("strong",[r("code",[e._v("flatMapWith( )")])]),e._v(" (scala) — "),r("em",[e._v("instance version of "),r("a",{attrs:{href:"https://github.com/ReactiveX/RxJava/wiki/Transforming-Observables#flatmap",target:"_blank",rel:"noopener noreferrer"}},[r("strong",[r("code",[e._v("flatmap( )")])]),r("OutboundLink")],1)])]),e._v(" "),r("li",[r("strong",[r("code",[e._v("flatten( )")])]),e._v(" (scala) — "),r("em",[e._v("see "),r("a",{attrs:{href:"https://github.com/ReactiveX/RxJava/wiki/Combining-Observables#merge",target:"_blank",rel:"noopener noreferrer"}},[r("strong",[r("code",[e._v("merge( )")])]),r("OutboundLink")],1)])]),e._v(" "),r("li",[r("strong",[r("code",[e._v("flattenDelayError( )")])]),e._v(" (scala) — "),r("em",[e._v("see "),r("a",{attrs:{href:"https://github.com/ReactiveX/RxJava/wiki/Combining-Observables#mergedelayerror",target:"_blank",rel:"noopener noreferrer"}},[r("strong",[r("code",[e._v("mergeDelayError( )")])]),r("OutboundLink")],1)])]),e._v(" "),r("li",[r("strong",[r("code",[e._v("foldLeft( )")])]),e._v(" (scala) — "),r("em",[e._v("see "),r("a",{attrs:{href:"https://github.com/ReactiveX/RxJava/wiki/Mathematical-and-Aggregate-Operators#reduce",target:"_blank",rel:"noopener noreferrer"}},[r("strong",[r("code",[e._v("reduce( )")])]),r("OutboundLink")],1)])]),e._v(" "),r("li",[r("strong",[r("code",[e._v("forall( )")])]),e._v(" (scala) — "),r("em",[e._v("see "),r("a",{attrs:{href:"https://github.com/ReactiveX/RxJava/wiki/Conditional-and-Boolean-Operators#boolean-operators",target:"_blank",rel:"noopener noreferrer"}},[r("strong",[r("code",[e._v("all( )")])]),r("OutboundLink")],1)])]),e._v(" "),r("li",[r("strong",[r("code",[e._v("forEach( )")])]),e._v(" ("),r("code",[e._v("Observable")]),e._v(") — "),r("em",[e._v("see "),r("a",{attrs:{href:"https://github.com/ReactiveX/RxJava/wiki/Observable",target:"_blank",rel:"noopener noreferrer"}},[r("strong",[r("code",[e._v("subscribe( )")])]),r("OutboundLink")],1)])]),e._v(" "),r("li",[r("a",{attrs:{href:"https://github.com/ReactiveX/RxJava/wiki/Blocking-Observable-Operators",target:"_blank",rel:"noopener noreferrer"}},[r("strong",[r("code",[e._v("forEach( )")])]),r("OutboundLink")],1),e._v(" ("),r("code",[e._v("BlockingObservable")]),e._v(") — invoke a function on each item emitted by the Observable; block until the Observable completes")]),e._v(" "),r("li",[r("a",{attrs:{href:"https://github.com/ReactiveX/RxJava/wiki/Async-Operators",target:"_blank",rel:"noopener noreferrer"}},[r("strong",[r("code",[e._v("forEachFuture( )")])]),r("OutboundLink")],1),e._v(" ("),r("code",[e._v("Async")]),e._v(") — pass Subscriber methods to an Observable but also have it behave like a Future that blocks until it completes ("),r("code",[e._v("rxjava-async")]),e._v(")")]),e._v(" "),r("li",[r("a",{attrs:{href:"https://github.com/ReactiveX/RxJava/wiki/Phantom-Operators#foreachfuture",target:"_blank",rel:"noopener noreferrer"}},[r("strong",[r("code",[e._v("forEachFuture( )")])]),r("OutboundLink")],1),e._v(" ("),r("code",[e._v("BlockingObservable")]),e._v(")— create a futureTask that will invoke a specified function on each item emitted by an Observable (⁇)")]),e._v(" "),r("li",[r("a",{attrs:{href:"https://github.com/ReactiveX/RxJava/wiki/Phantom-Operators#foriterable",target:"_blank",rel:"noopener noreferrer"}},[r("strong",[r("code",[e._v("forIterable( )")])]),r("OutboundLink")],1),e._v(" — apply a function to the elements of an Iterable to create Observables which are then concatenated (⁇)")]),e._v(" "),r("li",[r("a",{attrs:{href:"https://github.com/ReactiveX/RxJava/wiki/Creating-Observables#from",target:"_blank",rel:"noopener noreferrer"}},[r("strong",[r("code",[e._v("from( )")])]),r("OutboundLink")],1),e._v(" — convert an Iterable, a Future, or an Array into an Observable")]),e._v(" "),r("li",[r("a",{attrs:{href:"https://github.com/ReactiveX/RxJava/wiki/String-Observables",target:"_blank",rel:"noopener noreferrer"}},[r("strong",[r("code",[e._v("from( )")])]),r("OutboundLink")],1),e._v(" ("),r("code",[e._v("StringObservable")]),e._v(") — convert a stream of characters or a Reader into an Observable that emits byte arrays or Strings")]),e._v(" "),r("li",[r("a",{attrs:{href:"https://github.com/ReactiveX/RxJava/wiki/Async-Operators",target:"_blank",rel:"noopener noreferrer"}},[r("strong",[r("code",[e._v("fromAction( )")])]),r("OutboundLink")],1),e._v(" — convert an Action into an Observable that invokes the action and emits its result when a Subscriber subscribes ("),r("code",[e._v("rxjava-async")]),e._v(")")]),e._v(" "),r("li",[r("a",{attrs:{href:"https://github.com/ReactiveX/RxJava/wiki/Async-Operators",target:"_blank",rel:"noopener noreferrer"}},[r("strong",[r("code",[e._v("fromCallable( )")])]),r("OutboundLink")],1),e._v(" — convert a Callable into an Observable that invokes the callable and emits its result or exception when a Subscriber subscribes ("),r("code",[e._v("rxjava-async")]),e._v(")")]),e._v(" "),r("li",[r("a",{attrs:{href:"https://github.com/ReactiveX/RxJava/wiki/Phantom-Operators#fromcancellablefuture-startcancellablefuture-and-defercancellablefuture",target:"_blank",rel:"noopener noreferrer"}},[r("strong",[r("code",[e._v("fromCancellableFuture( )")])]),r("OutboundLink")],1),e._v(" — convert a Future into an Observable in a way that monitors the subscription status of the Observable to determine whether to halt work on the Future, but do not attempt to get the Future's value until a Subscriber subscribes (⁇)("),r("code",[e._v("rxjava-async")]),e._v(")")]),e._v(" "),r("li",[r("strong",[r("code",[e._v("fromFunc0( )")])]),e._v(" — "),r("em",[e._v("see "),r("a",{attrs:{href:"https://github.com/ReactiveX/RxJava/wiki/Async-Operators",target:"_blank",rel:"noopener noreferrer"}},[r("strong",[r("code",[e._v("fromCallable( )")])]),r("OutboundLink")],1),e._v(" ("),r("code",[e._v("rxjava-async")]),e._v(")")])]),e._v(" "),r("li",[r("a",{attrs:{href:"https://github.com/ReactiveX/RxJava/wiki/Phantom-Operators#fromfuture",target:"_blank",rel:"noopener noreferrer"}},[r("strong",[r("code",[e._v("fromFuture( )")])]),r("OutboundLink")],1),e._v(" — convert a Future into an Observable, but do not attempt to get the Future's value until a Subscriber subscribes (⁇)")]),e._v(" "),r("li",[r("a",{attrs:{href:"https://github.com/ReactiveX/RxJava/wiki/Async-Operators#fromrunnable",target:"_blank",rel:"noopener noreferrer"}},[r("strong",[r("code",[e._v("fromRunnable( )")])]),r("OutboundLink")],1),e._v(" — convert a Runnable into an Observable that invokes the runable and emits its result when a Subscriber subscribes ("),r("code",[e._v("rxjava-async")]),e._v(")")]),e._v(" "),r("li",[r("a",{attrs:{href:"https://github.com/ReactiveX/RxJava/wiki/Phantom-Operators#generate-and-generateabsolutetime",target:"_blank",rel:"noopener noreferrer"}},[r("strong",[r("code",[e._v("generate( )")])]),r("OutboundLink")],1),e._v(" — create an Observable that emits a sequence of items as generated by a function of your choosing (⁇)")]),e._v(" "),r("li",[r("a",{attrs:{href:"https://github.com/ReactiveX/RxJava/wiki/Phantom-Operators#generate-and-generateabsolutetime",target:"_blank",rel:"noopener noreferrer"}},[r("strong",[r("code",[e._v("generateAbsoluteTime( )")])]),r("OutboundLink")],1),e._v(" — create an Observable that emits a sequence of items as generated by a function of your choosing, with each item emitted at an item-specific time (⁇)")]),e._v(" "),r("li",[r("strong",[r("code",[e._v("generator( )")])]),e._v(" (clojure) — "),r("em",[e._v("see "),r("a",{attrs:{href:"https://github.com/ReactiveX/RxJava/wiki/Phantom-Operators#generate-and-generateabsolutetime",target:"_blank",rel:"noopener noreferrer"}},[r("strong",[r("code",[e._v("generate( )")])]),r("OutboundLink")],1)])]),e._v(" "),r("li",[r("a",{attrs:{href:"https://github.com/ReactiveX/RxJava/wiki/Blocking-Observable-Operators",target:"_blank",rel:"noopener noreferrer"}},[r("strong",[r("code",[e._v("getIterator( )")])]),r("OutboundLink")],1),e._v(" — convert the sequence emitted by the Observable into an Iterator")]),e._v(" "),r("li",[r("a",{attrs:{href:"https://github.com/ReactiveX/RxJava/wiki/Transforming-Observables#groupby",target:"_blank",rel:"noopener noreferrer"}},[r("strong",[r("code",[e._v("groupBy( )")])]),r("OutboundLink")],1),e._v(" — divide an Observable into a set of Observables that emit groups of items from the original Observable, organized by key")]),e._v(" "),r("li",[r("strong",[r("code",[e._v("group-by( )")])]),e._v(" (clojure) — "),r("em",[e._v("see "),r("a",{attrs:{href:"https://github.com/ReactiveX/RxJava/wiki/Transforming-Observables#groupby",target:"_blank",rel:"noopener noreferrer"}},[r("strong",[r("code",[e._v("groupBy( )")])]),r("OutboundLink")],1)])]),e._v(" "),r("li",[r("a",{attrs:{href:"https://github.com/ReactiveX/RxJava/wiki/Phantom-Operators",target:"_blank",rel:"noopener noreferrer"}},[r("strong",[r("code",[e._v("groupByUntil( )")])]),r("OutboundLink")],1),e._v(" — a variant of the "),r("a",{attrs:{href:"https://github.com/ReactiveX/RxJava/wiki/Transforming-Observables#groupby",target:"_blank",rel:"noopener noreferrer"}},[r("code",[e._v("groupBy( )")]),r("OutboundLink")],1),e._v(" operator that closes any open GroupedObservable upon a signal from another Observable (⁇)")]),e._v(" "),r("li",[r("a",{attrs:{href:"https://github.com/ReactiveX/RxJava/wiki/Combining-Observables#joins",target:"_blank",rel:"noopener noreferrer"}},[r("strong",[r("code",[e._v("groupJoin( )")])]),r("OutboundLink")],1),e._v(" — combine the items emitted by two Observables whenever one item from one Observable falls within a window of duration specified by an item emitted by the other Observable")]),e._v(" "),r("li",[r("strong",[r("code",[e._v("head( )")])]),e._v(" (scala) — "),r("em",[e._v("see "),r("a",{attrs:{href:"https://github.com/ReactiveX/RxJava/wiki/Blocking-Observable-Operators",target:"_blank",rel:"noopener noreferrer"}},[r("strong",[r("code",[e._v("first( )")])]),r("OutboundLink")],1),e._v(" ("),r("code",[e._v("BlockingObservable")]),e._v(")")])]),e._v(" "),r("li",[r("strong",[r("code",[e._v("headOption( )")])]),e._v(" (scala) — "),r("em",[e._v("see "),r("a",{attrs:{href:"https://github.com/ReactiveX/RxJava/wiki/Filtering-Observables",target:"_blank",rel:"noopener noreferrer"}},[r("strong",[r("code",[e._v("firstOrDefault( )")])]),r("OutboundLink")],1),e._v(" or "),r("a",{attrs:{href:"https://github.com/ReactiveX/RxJava/wiki/Blocking-Observable-Operators",target:"_blank",rel:"noopener noreferrer"}},[r("strong",[r("code",[e._v("firstOrDefault( )")])]),r("OutboundLink")],1),e._v(" ("),r("code",[e._v("BlockingObservable")]),e._v(")")])]),e._v(" "),r("li",[r("strong",[r("code",[e._v("headOrElse( )")])]),e._v(" (scala) — "),r("em",[e._v("see "),r("a",{attrs:{href:"https://github.com/ReactiveX/RxJava/wiki/Filtering-Observables",target:"_blank",rel:"noopener noreferrer"}},[r("strong",[r("code",[e._v("firstOrDefault( )")])]),r("OutboundLink")],1),e._v(" or "),r("a",{attrs:{href:"https://github.com/ReactiveX/RxJava/wiki/Blocking-Observable-Operators",target:"_blank",rel:"noopener noreferrer"}},[r("strong",[r("code",[e._v("firstOrDefault( )")])]),r("OutboundLink")],1),e._v(" ("),r("code",[e._v("BlockingObservable")]),e._v(")")])]),e._v(" "),r("li",[r("a",{attrs:{href:"https://github.com/ReactiveX/RxJava/wiki/Conditional-and-Boolean-Operators#conditional-operators",target:"_blank",rel:"noopener noreferrer"}},[r("strong",[r("code",[e._v("ifThen( )")])]),r("OutboundLink")],1),e._v(" — only emit the source Observable's sequence if a condition is true, otherwise emit an empty or default sequence ("),r("code",[e._v("contrib-computation-expressions")]),e._v(")")]),e._v(" "),r("li",[r("a",{attrs:{href:"https://github.com/ReactiveX/RxJava/wiki/Filtering-Observables#ignoreelements",target:"_blank",rel:"noopener noreferrer"}},[r("strong",[r("code",[e._v("ignoreElements( )")])]),r("OutboundLink")],1),e._v(" — discard the items emitted by the source Observable and only pass through the error or completed notification")]),e._v(" "),r("li",[r("a",{attrs:{href:"https://github.com/ReactiveX/RxJava/wiki/Creating-Observables#interval",target:"_blank",rel:"noopener noreferrer"}},[r("strong",[r("code",[e._v("interval( )")])]),r("OutboundLink")],1),e._v(" — create an Observable that emits a sequence of integers spaced by a given time interval")]),e._v(" "),r("li",[r("strong",[r("code",[e._v("into( )")])]),e._v(" (clojure) — "),r("em",[e._v("see "),r("a",{attrs:{href:"https://github.com/ReactiveX/RxJava/wiki/Mathematical-and-Aggregate-Operators#reduce",target:"_blank",rel:"noopener noreferrer"}},[r("strong",[r("code",[e._v("reduce( )")])]),r("OutboundLink")],1)])]),e._v(" "),r("li",[r("a",{attrs:{href:"https://github.com/ReactiveX/RxJava/wiki/Conditional-and-Boolean-Operators#boolean-operators",target:"_blank",rel:"noopener noreferrer"}},[r("strong",[r("code",[e._v("isEmpty( )")])]),r("OutboundLink")],1),e._v(" — determine whether an Observable emits any items or not")]),e._v(" "),r("li",[r("strong",[r("code",[e._v("items( )")])]),e._v(" (scala) — "),r("em",[e._v("see "),r("a",{attrs:{href:"https://github.com/ReactiveX/RxJava/wiki/Creating-Observables#just",target:"_blank",rel:"noopener noreferrer"}},[r("strong",[r("code",[e._v("just( )")])]),r("OutboundLink")],1)])]),e._v(" "),r("li",[r("a",{attrs:{href:"https://github.com/ReactiveX/RxJava/wiki/Combining-Observables#joins",target:"_blank",rel:"noopener noreferrer"}},[r("strong",[r("code",[e._v("join( )")])]),r("OutboundLink")],1),e._v(" — combine the items emitted by two Observables whenever one item from one Observable falls within a window of duration specified by an item emitted by the other Observable")]),e._v(" "),r("li",[r("a",{attrs:{href:"https://github.com/ReactiveX/RxJava/wiki/String-Observables",target:"_blank",rel:"noopener noreferrer"}},[r("strong",[r("code",[e._v("join( )")])]),r("OutboundLink")],1),e._v(" ("),r("code",[e._v("StringObservable")]),e._v(") — converts an Observable that emits a sequence of strings into an Observable that emits a single string that concatenates them all, separating them by a specified string")]),e._v(" "),r("li",[r("a",{attrs:{href:"https://github.com/ReactiveX/RxJava/wiki/Creating-Observables#just",target:"_blank",rel:"noopener noreferrer"}},[r("strong",[r("code",[e._v("just( )")])]),r("OutboundLink")],1),e._v(" — convert an object into an Observable that emits that object")]),e._v(" "),r("li",[r("a",{attrs:{href:"https://github.com/ReactiveX/RxJava/wiki/Blocking-Observable-Operators",target:"_blank",rel:"noopener noreferrer"}},[r("strong",[r("code",[e._v("last( )")])]),r("OutboundLink")],1),e._v(" ("),r("code",[e._v("BlockingObservable")]),e._v(") — block until the Observable completes, then return the last item emitted by the Observable")]),e._v(" "),r("li",[r("a",{attrs:{href:"https://github.com/ReactiveX/RxJava/wiki/Filtering-Observables#last",target:"_blank",rel:"noopener noreferrer"}},[r("strong",[r("code",[e._v("last( )")])]),r("OutboundLink")],1),e._v(" ("),r("code",[e._v("Observable")]),e._v(") — emit only the last item emitted by the source Observable")]),e._v(" "),r("li",[r("strong",[r("code",[e._v("lastOption( )")])]),e._v(" (scala) — "),r("em",[e._v("see "),r("a",{attrs:{href:"https://github.com/ReactiveX/RxJava/wiki/Filtering-Observables",target:"_blank",rel:"noopener noreferrer"}},[r("strong",[r("code",[e._v("lastOrDefault( )")])]),r("OutboundLink")],1),e._v(" or "),r("a",{attrs:{href:"https://github.com/ReactiveX/RxJava/wiki/Blocking-Observable-Operators",target:"_blank",rel:"noopener noreferrer"}},[r("strong",[r("code",[e._v("lastOrDefault( )")])]),r("OutboundLink")],1),e._v(" ("),r("code",[e._v("BlockingObservable")]),e._v(")")])]),e._v(" "),r("li",[r("a",{attrs:{href:"https://github.com/ReactiveX/RxJava/wiki/Blocking-Observable-Operators",target:"_blank",rel:"noopener noreferrer"}},[r("strong",[r("code",[e._v("lastOrDefault( )")])]),r("OutboundLink")],1),e._v(" ("),r("code",[e._v("BlockingObservable")]),e._v(") — block until the Observable completes, then return the last item emitted by the Observable or a default item if there is no last item")]),e._v(" "),r("li",[r("a",{attrs:{href:"https://github.com/ReactiveX/RxJava/wiki/Filtering-Observables",target:"_blank",rel:"noopener noreferrer"}},[r("strong",[r("code",[e._v("lastOrDefault( )")])]),r("OutboundLink")],1),e._v(" ("),r("code",[e._v("Observable")]),e._v(") — emit only the last item emitted by an Observable, or a default value if the source Observable is empty")]),e._v(" "),r("li",[r("strong",[r("code",[e._v("lastOrElse( )")])]),e._v(" (scala) — "),r("em",[e._v("see "),r("a",{attrs:{href:"https://github.com/ReactiveX/RxJava/wiki/Filtering-Observables",target:"_blank",rel:"noopener noreferrer"}},[r("strong",[r("code",[e._v("lastOrDefault( )")])]),r("OutboundLink")],1),e._v(" or "),r("a",{attrs:{href:"https://github.com/ReactiveX/RxJava/wiki/Blocking-Observable-Operators",target:"_blank",rel:"noopener noreferrer"}},[r("strong",[r("code",[e._v("lastOrDefault( )")])]),r("OutboundLink")],1),e._v(" ("),r("code",[e._v("BlockingObservable")]),e._v(")")])]),e._v(" "),r("li",[r("a",{attrs:{href:"https://github.com/ReactiveX/RxJava/wiki/Blocking-Observable-Operators",target:"_blank",rel:"noopener noreferrer"}},[r("strong",[r("code",[e._v("latest( )")])]),r("OutboundLink")],1),e._v(" — returns an iterable that blocks until or unless the Observable emits an item that has not been returned by the iterable, then returns the latest such item")]),e._v(" "),r("li",[r("strong",[r("code",[e._v("length( )")])]),e._v(" (scala) — "),r("em",[e._v("see "),r("a",{attrs:{href:"https://github.com/ReactiveX/RxJava/wiki/Mathematical-and-Aggregate-Operators#count",target:"_blank",rel:"noopener noreferrer"}},[r("strong",[r("code",[e._v("count( )")])]),r("OutboundLink")],1)])]),e._v(" "),r("li",[r("strong",[r("code",[e._v("limit( )")])]),e._v(" — "),r("em",[e._v("see "),r("a",{attrs:{href:"https://github.com/ReactiveX/RxJava/wiki/Filtering-Observables#take",target:"_blank",rel:"noopener noreferrer"}},[r("strong",[r("code",[e._v("take( )")])]),r("OutboundLink")],1)])]),e._v(" "),r("li",[r("strong",[r("code",[e._v("longCount( )")])]),e._v(" (scala) — "),r("em",[e._v("see "),r("a",{attrs:{href:"https://github.com/ReactiveX/RxJava/wiki/Mathematical-and-Aggregate-Operators",target:"_blank",rel:"noopener noreferrer"}},[r("strong",[r("code",[e._v("countLong( )")])]),r("OutboundLink")],1)])]),e._v(" "),r("li",[r("a",{attrs:{href:"https://github.com/ReactiveX/RxJava/wiki/Transforming-Observables#map",target:"_blank",rel:"noopener noreferrer"}},[r("strong",[r("code",[e._v("map( )")])]),r("OutboundLink")],1),e._v(" — transform the items emitted by an Observable by applying a function to each of them")]),e._v(" "),r("li",[r("strong",[r("code",[e._v("mapcat( )")])]),e._v(" (clojure) — "),r("em",[e._v("see "),r("a",{attrs:{href:"https://github.com/ReactiveX/RxJava/wiki/Transforming-Observables#concatmap",target:"_blank",rel:"noopener noreferrer"}},[r("strong",[r("code",[e._v("concatMap( )")])]),r("OutboundLink")],1)])]),e._v(" "),r("li",[r("strong",[r("code",[e._v("mapMany( )")])]),e._v(" — "),r("em",[e._v("see: "),r("a",{attrs:{href:"https://github.com/ReactiveX/RxJava/wiki/Transforming-Observables#flatmap",target:"_blank",rel:"noopener noreferrer"}},[r("strong",[r("code",[e._v("flatMap( )")])]),r("OutboundLink")],1)])]),e._v(" "),r("li",[r("a",{attrs:{href:"https://github.com/ReactiveX/RxJava/wiki/Observable-Utility-Operators",target:"_blank",rel:"noopener noreferrer"}},[r("strong",[r("code",[e._v("materialize( )")])]),r("OutboundLink")],1),e._v(" — convert an Observable into a list of Notifications")]),e._v(" "),r("li",[r("a",{attrs:{href:"https://github.com/ReactiveX/RxJava/wiki/Mathematical-and-Aggregate-Operators#max",target:"_blank",rel:"noopener noreferrer"}},[r("strong",[r("code",[e._v("max( )")])]),r("OutboundLink")],1),e._v(" — emits the maximum value emitted by a source Observable ("),r("code",[e._v("rxjava-math")]),e._v(")")]),e._v(" "),r("li",[r("a",{attrs:{href:"https://github.com/ReactiveX/RxJava/wiki/Mathematical-and-Aggregate-Operators",target:"_blank",rel:"noopener noreferrer"}},[r("strong",[r("code",[e._v("maxBy( )")])]),r("OutboundLink")],1),e._v(" — emits the item emitted by the source Observable that has the maximum key value ("),r("code",[e._v("rxjava-math")]),e._v(")")]),e._v(" "),r("li",[r("a",{attrs:{href:"https://github.com/ReactiveX/RxJava/wiki/Combining-Observables#merge",target:"_blank",rel:"noopener noreferrer"}},[r("strong",[r("code",[e._v("merge( )")])]),r("OutboundLink")],1),e._v(" — combine multiple Observables into one")]),e._v(" "),r("li",[r("a",{attrs:{href:"https://github.com/ReactiveX/RxJava/wiki/Combining-Observables#mergedelayerror",target:"_blank",rel:"noopener noreferrer"}},[r("strong",[r("code",[e._v("mergeDelayError( )")])]),r("OutboundLink")],1),e._v(" — combine multiple Observables into one, allowing error-free Observables to continue before propagating errors")]),e._v(" "),r("li",[r("strong",[r("code",[e._v("merge-delay-error( )")])]),e._v(" (clojure) — "),r("em",[e._v("see "),r("a",{attrs:{href:"https://github.com/ReactiveX/RxJava/wiki/Combining-Observables#mergedelayerror",target:"_blank",rel:"noopener noreferrer"}},[r("strong",[r("code",[e._v("mergeDelayError( )")])]),r("OutboundLink")],1)])]),e._v(" "),r("li",[r("strong",[r("code",[e._v("mergeMap( )")])]),e._v(" * — "),r("em",[e._v("see: "),r("a",{attrs:{href:"https://github.com/ReactiveX/RxJava/wiki/Transforming-Observables#flatmap",target:"_blank",rel:"noopener noreferrer"}},[r("strong",[r("code",[e._v("flatMap( )")])]),r("OutboundLink")],1)])]),e._v(" "),r("li",[r("strong",[r("code",[e._v("mergeMapIterable( )")])]),e._v(" — "),r("em",[e._v("see: "),r("a",{attrs:{href:"https://github.com/ReactiveX/RxJava/wiki/Transforming-Observables#flatmapiterable",target:"_blank",rel:"noopener noreferrer"}},[r("strong",[r("code",[e._v("flatMapIterable( )")])]),r("OutboundLink")],1)])]),e._v(" "),r("li",[r("strong",[r("code",[e._v("mergeWith( )")])]),e._v(" — "),r("em",[e._v("instance version of "),r("a",{attrs:{href:"https://github.com/ReactiveX/RxJava/wiki/Combining-Observables#merge",target:"_blank",rel:"noopener noreferrer"}},[r("strong",[r("code",[e._v("merge( )")])]),r("OutboundLink")],1)])]),e._v(" "),r("li",[r("a",{attrs:{href:"https://github.com/ReactiveX/RxJava/wiki/Mathematical-and-Aggregate-Operators#min",target:"_blank",rel:"noopener noreferrer"}},[r("strong",[r("code",[e._v("min( )")])]),r("OutboundLink")],1),e._v(" — emits the minimum value emitted by a source Observable ("),r("code",[e._v("rxjava-math")]),e._v(")")]),e._v(" "),r("li",[r("a",{attrs:{href:"https://github.com/ReactiveX/RxJava/wiki/Mathematical-and-Aggregate-Operators",target:"_blank",rel:"noopener noreferrer"}},[r("strong",[r("code",[e._v("minBy( )")])]),r("OutboundLink")],1),e._v(" — emits the item emitted by the source Observable that has the minimum key value ("),r("code",[e._v("rxjava-math")]),e._v(")")]),e._v(" "),r("li",[r("a",{attrs:{href:"https://github.com/ReactiveX/RxJava/wiki/Blocking-Observable-Operators",target:"_blank",rel:"noopener noreferrer"}},[r("strong",[r("code",[e._v("mostRecent( )")])]),r("OutboundLink")],1),e._v(" — returns an iterable that always returns the item most recently emitted by the Observable")]),e._v(" "),r("li",[r("a",{attrs:{href:"https://github.com/ReactiveX/RxJava/wiki/Phantom-Operators#multicast",target:"_blank",rel:"noopener noreferrer"}},[r("strong",[r("code",[e._v("multicast( )")])]),r("OutboundLink")],1),e._v(" — represents an Observable as a Connectable Observable")]),e._v(" "),r("li",[r("a",{attrs:{href:"https://github.com/ReactiveX/RxJava/wiki/Creating-Observables#never",target:"_blank",rel:"noopener noreferrer"}},[r("strong",[r("code",[e._v("never( )")])]),r("OutboundLink")],1),e._v(" — create an Observable that emits nothing at all")]),e._v(" "),r("li",[r("a",{attrs:{href:"https://github.com/ReactiveX/RxJava/wiki/Blocking-Observable-Operators",target:"_blank",rel:"noopener noreferrer"}},[r("strong",[r("code",[e._v("next( )")])]),r("OutboundLink")],1),e._v(" — returns an iterable that blocks until the Observable emits another item, then returns that item")]),e._v(" "),r("li",[r("strong",[r("code",[e._v("nonEmpty( )")])]),e._v(" (scala) — "),r("em",[e._v("see "),r("a",{attrs:{href:"https://github.com/ReactiveX/RxJava/wiki/Conditional-and-Boolean-Operators#boolean-operators",target:"_blank",rel:"noopener noreferrer"}},[r("strong",[r("code",[e._v("isEmpty( )")])]),r("OutboundLink")],1)])]),e._v(" "),r("li",[r("strong",[r("code",[e._v("nth( )")])]),e._v(" (clojure) — "),r("em",[e._v("see "),r("a",{attrs:{href:"https://github.com/ReactiveX/RxJava/wiki/Filtering-Observables#elementat",target:"_blank",rel:"noopener noreferrer"}},[r("strong",[r("code",[e._v("elementAt( )")])]),r("OutboundLink")],1),e._v(" and "),r("a",{attrs:{href:"https://github.com/ReactiveX/RxJava/wiki/Filtering-Observables",target:"_blank",rel:"noopener noreferrer"}},[r("strong",[r("code",[e._v("elementAtOrDefault( )")])]),r("OutboundLink")],1)])]),e._v(" "),r("li",[r("a",{attrs:{href:"https://github.com/ReactiveX/RxJava/wiki/Observable-Utility-Operators",target:"_blank",rel:"noopener noreferrer"}},[r("strong",[r("code",[e._v("observeOn( )")])]),r("OutboundLink")],1),e._v(" — specify on which Scheduler a Subscriber should observe the Observable")]),e._v(" "),r("li",[r("a",{attrs:{href:"https://github.com/ReactiveX/RxJava/wiki/Filtering-Observables#oftype",target:"_blank",rel:"noopener noreferrer"}},[r("strong",[r("code",[e._v("ofType( )")])]),r("OutboundLink")],1),e._v(" — emit only those items from the source Observable that are of a particular class")]),e._v(" "),r("li",[r("a",{attrs:{href:"https://github.com/ReactiveX/RxJava/wiki/Backpressure#reactive-pull-backpressure-isnt-magic",target:"_blank",rel:"noopener noreferrer"}},[r("strong",[r("code",[e._v("onBackpressureBlock( )")])]),r("OutboundLink")],1),e._v(" — block the Observable's thread until the Observer is ready to accept more items from the Observable (⁇)")]),e._v(" "),r("li",[r("a",{attrs:{href:"https://github.com/ReactiveX/RxJava/wiki/Backpressure#reactive-pull-backpressure-isnt-magic",target:"_blank",rel:"noopener noreferrer"}},[r("strong",[r("code",[e._v("onBackpressureBuffer( )")])]),r("OutboundLink")],1),e._v(" — maintain a buffer of all emissions from the source Observable and emit them to downstream Subscribers according to the requests they generate")]),e._v(" "),r("li",[r("a",{attrs:{href:"https://github.com/ReactiveX/RxJava/wiki/Backpressure#reactive-pull-backpressure-isnt-magic",target:"_blank",rel:"noopener noreferrer"}},[r("strong",[r("code",[e._v("onBackpressureDrop( )")])]),r("OutboundLink")],1),e._v(" — drop emissions from the source Observable unless there is a pending request from a downstream Subscriber, in which case emit enough items to fulfill the request")]),e._v(" "),r("li",[r("a",{attrs:{href:"https://github.com/ReactiveX/RxJava/wiki/Phantom-Operators#onerrorflatmap",target:"_blank",rel:"noopener noreferrer"}},[r("strong",[r("code",[e._v("onErrorFlatMap( )")])]),r("OutboundLink")],1),e._v(" — instructs an Observable to emit a sequence of items whenever it encounters an error (⁇)")]),e._v(" "),r("li",[r("a",{attrs:{href:"https://github.com/ReactiveX/RxJava/wiki/Error-Handling-Operators#onerrorresumenext",target:"_blank",rel:"noopener noreferrer"}},[r("strong",[r("code",[e._v("onErrorResumeNext( )")])]),r("OutboundLink")],1),e._v(" — instructs an Observable to emit a sequence of items if it encounters an error")]),e._v(" "),r("li",[r("a",{attrs:{href:"https://github.com/ReactiveX/RxJava/wiki/Error-Handling-Operators#onerrorreturn",target:"_blank",rel:"noopener noreferrer"}},[r("strong",[r("code",[e._v("onErrorReturn( )")])]),r("OutboundLink")],1),e._v(" — instructs an Observable to emit a particular item when it encounters an error")]),e._v(" "),r("li",[r("a",{attrs:{href:"https://github.com/ReactiveX/RxJava/wiki/Error-Handling-Operators#onexceptionresumenext",target:"_blank",rel:"noopener noreferrer"}},[r("strong",[r("code",[e._v("onExceptionResumeNext( )")])]),r("OutboundLink")],1),e._v(" — instructs an Observable to continue emitting items after it encounters an exception (but not another variety of throwable)")]),e._v(" "),r("li",[r("strong",[r("code",[e._v("orElse( )")])]),e._v(" (scala) — "),r("em",[e._v("see "),r("a",{attrs:{href:"https://github.com/ReactiveX/RxJava/wiki/Conditional-and-Boolean-Operators#conditional-operators",target:"_blank",rel:"noopener noreferrer"}},[r("strong",[r("code",[e._v("defaultIfEmpty( )")])]),r("OutboundLink")],1)])]),e._v(" "),r("li",[r("a",{attrs:{href:"https://github.com/ReactiveX/RxJava/wiki/Phantom-Operators#parallel",target:"_blank",rel:"noopener noreferrer"}},[r("strong",[r("code",[e._v("parallel( )")])]),r("OutboundLink")],1),e._v(" — split the work done on the emissions from an Observable into multiple Observables each operating on its own parallel thread (⁇)")]),e._v(" "),r("li",[r("a",{attrs:{href:"https://github.com/ReactiveX/RxJava/wiki/Phantom-Operators#parallelmerge",target:"_blank",rel:"noopener noreferrer"}},[r("strong",[r("code",[e._v("parallelMerge( )")])]),r("OutboundLink")],1),e._v(" — combine multiple Observables into smaller number of Observables (⁇)")]),e._v(" "),r("li",[r("a",{attrs:{href:"https://github.com/ReactiveX/RxJava/wiki/Phantom-Operators#pivot",target:"_blank",rel:"noopener noreferrer"}},[r("strong",[r("code",[e._v("pivot( )")])]),r("OutboundLink")],1),e._v(" — combine multiple sets of grouped observables so that they are arranged primarily by group rather than by set (⁇)")]),e._v(" "),r("li",[r("a",{attrs:{href:"https://github.com/ReactiveX/RxJava/wiki/Connectable-Observable-Operators",target:"_blank",rel:"noopener noreferrer"}},[r("strong",[r("code",[e._v("publish( )")])]),r("OutboundLink")],1),e._v(" — represents an Observable as a Connectable Observable")]),e._v(" "),r("li",[r("a",{attrs:{href:"https://github.com/ReactiveX/RxJava/wiki/Phantom-Operators#publishlast",target:"_blank",rel:"noopener noreferrer"}},[r("strong",[r("code",[e._v("publishLast( )")])]),r("OutboundLink")],1),e._v(" — represent an Observable as a Connectable Observable that emits only the last item emitted by the source Observable (⁇)")]),e._v(" "),r("li",[r("a",{attrs:{href:"https://github.com/ReactiveX/RxJava/wiki/Creating-Observables#range",target:"_blank",rel:"noopener noreferrer"}},[r("strong",[r("code",[e._v("range( )")])]),r("OutboundLink")],1),e._v(" — create an Observable that emits a range of sequential integers")]),e._v(" "),r("li",[r("a",{attrs:{href:"https://github.com/ReactiveX/RxJava/wiki/Mathematical-and-Aggregate-Operators#reduce",target:"_blank",rel:"noopener noreferrer"}},[r("strong",[r("code",[e._v("reduce( )")])]),r("OutboundLink")],1),e._v(" — apply a function to each emitted item, sequentially, and emit only the final accumulated value")]),e._v(" "),r("li",[r("strong",[r("code",[e._v("reductions( )")])]),e._v(" (clojure) — "),r("em",[e._v("see "),r("a",{attrs:{href:"https://github.com/ReactiveX/RxJava/wiki/Transforming-Observables#scan",target:"_blank",rel:"noopener noreferrer"}},[r("strong",[r("code",[e._v("scan( )")])]),r("OutboundLink")],1)])]),e._v(" "),r("li",[r("a",{attrs:{href:"https://github.com/ReactiveX/RxJava/wiki/Connectable-Observable-Operators",target:"_blank",rel:"noopener noreferrer"}},[r("strong",[r("code",[e._v("refCount( )")])]),r("OutboundLink")],1),e._v(" — makes a Connectable Observable behave like an ordinary Observable")]),e._v(" "),r("li",[r("a",{attrs:{href:"https://github.com/ReactiveX/RxJava/wiki/Creating-Observables",target:"_blank",rel:"noopener noreferrer"}},[r("strong",[r("code",[e._v("repeat( )")])]),r("OutboundLink")],1),e._v(" — create an Observable that emits a particular item or sequence of items repeatedly")]),e._v(" "),r("li",[r("a",{attrs:{href:"https://github.com/ReactiveX/RxJava/wiki/Creating-Observables#repeatwhen",target:"_blank",rel:"noopener noreferrer"}},[r("strong",[r("code",[e._v("repeatWhen( )")])]),r("OutboundLink")],1),e._v(" — create an Observable that emits a particular item or sequence of items repeatedly, depending on the emissions of a second Observable")]),e._v(" "),r("li",[r("a",{attrs:{href:"https://github.com/ReactiveX/RxJava/wiki/Connectable-Observable-Operators#observablereplay",target:"_blank",rel:"noopener noreferrer"}},[r("strong",[r("code",[e._v("replay( )")])]),r("OutboundLink")],1),e._v(" — ensures that all Subscribers see the same sequence of emitted items, even if they subscribe after the Observable begins emitting the items")]),e._v(" "),r("li",[r("strong",[r("code",[e._v("rest( )")])]),e._v(" (clojure) — "),r("em",[e._v("see "),r("a",{attrs:{href:"https://github.com/ReactiveX/RxJava/wiki/Blocking-Observable-Operators#next",target:"_blank",rel:"noopener noreferrer"}},[r("strong",[r("code",[e._v("next( )")])]),r("OutboundLink")],1)])]),e._v(" "),r("li",[r("strong",[r("code",[e._v("return( )")])]),e._v(" (clojure) — "),r("em",[e._v("see "),r("a",{attrs:{href:"https://github.com/ReactiveX/RxJava/wiki/Creating-Observables#just",target:"_blank",rel:"noopener noreferrer"}},[r("strong",[r("code",[e._v("just( )")])]),r("OutboundLink")],1)])]),e._v(" "),r("li",[r("a",{attrs:{href:"https://github.com/ReactiveX/RxJava/wiki/Error-Handling-Operators#retry",target:"_blank",rel:"noopener noreferrer"}},[r("strong",[r("code",[e._v("retry( )")])]),r("OutboundLink")],1),e._v(" — if a source Observable emits an error, resubscribe to it in the hopes that it will complete without error")]),e._v(" "),r("li",[r("a",{attrs:{href:"https://github.com/ReactiveX/RxJava/wiki/Error-Handling-Operators#retrywhen",target:"_blank",rel:"noopener noreferrer"}},[r("strong",[r("code",[e._v("retrywhen( )")])]),r("OutboundLink")],1),e._v(" — if a source Observable emits an error, pass that error to another Observable to determine whether to resubscribe to the source")]),e._v(" "),r("li",[r("a",{attrs:{href:"https://github.com/ReactiveX/RxJava/wiki/Async-Operators",target:"_blank",rel:"noopener noreferrer"}},[r("strong",[r("code",[e._v("runAsync( )")])]),r("OutboundLink")],1),e._v(" — returns a "),r("code",[e._v("StoppableObservable")]),e._v(" that emits multiple actions as generated by a specified Action on a Scheduler ("),r("code",[e._v("rxjava-async")]),e._v(")")]),e._v(" "),r("li",[r("a",{attrs:{href:"https://github.com/ReactiveX/RxJava/wiki/Filtering-Observables#sample",target:"_blank",rel:"noopener noreferrer"}},[r("strong",[r("code",[e._v("sample( )")])]),r("OutboundLink")],1),e._v(" — emit the most recent items emitted by an Observable within periodic time intervals")]),e._v(" "),r("li",[r("a",{attrs:{href:"https://github.com/ReactiveX/RxJava/wiki/Transforming-Observables#scan",target:"_blank",rel:"noopener noreferrer"}},[r("strong",[r("code",[e._v("scan( )")])]),r("OutboundLink")],1),e._v(" — apply a function to each item emitted by an Observable, sequentially, and emit each successive value")]),e._v(" "),r("li",[r("strong",[r("code",[e._v("seq( )")])]),e._v(" (clojure) — "),r("em",[e._v("see "),r("a",{attrs:{href:"https://github.com/ReactiveX/RxJava/wiki/Blocking-Observable-Operators",target:"_blank",rel:"noopener noreferrer"}},[r("strong",[r("code",[e._v("getIterator( )")])]),r("OutboundLink")],1)])]),e._v(" "),r("li",[r("a",{attrs:{href:"https://github.com/ReactiveX/RxJava/wiki/Conditional-and-Boolean-Operators",target:"_blank",rel:"noopener noreferrer"}},[r("strong",[r("code",[e._v("sequenceEqual( )")])]),r("OutboundLink")],1),e._v(" — test the equality of sequences emitted by two Observables")]),e._v(" "),r("li",[r("strong",[r("code",[e._v("sequenceEqualWith( )")])]),e._v(" (scala) — "),r("em",[e._v("instance version of "),r("a",{attrs:{href:"https://github.com/ReactiveX/RxJava/wiki/Conditional-and-Boolean-Operators",target:"_blank",rel:"noopener noreferrer"}},[r("strong",[r("code",[e._v("sequenceEqual( )")])]),r("OutboundLink")],1)])]),e._v(" "),r("li",[r("a",{attrs:{href:"https://github.com/ReactiveX/RxJava/wiki/Observable-Utility-Operators#serialize",target:"_blank",rel:"noopener noreferrer"}},[r("strong",[r("code",[e._v("serialize( )")])]),r("OutboundLink")],1),e._v(" — force an Observable to make serialized calls and to be well-behaved")]),e._v(" "),r("li",[r("strong",[r("code",[e._v("share( )")])]),e._v(" — "),r("em",[e._v("see "),r("a",{attrs:{href:"https://github.com/ReactiveX/RxJava/wiki/Connectable-Observable-Operators",target:"_blank",rel:"noopener noreferrer"}},[r("strong",[r("code",[e._v("refCount( )")])]),r("OutboundLink")],1)])]),e._v(" "),r("li",[r("a",{attrs:{href:"https://github.com/ReactiveX/RxJava/wiki/Blocking-Observable-Operators",target:"_blank",rel:"noopener noreferrer"}},[r("strong",[r("code",[e._v("single( )")])]),r("OutboundLink")],1),e._v(" ("),r("code",[e._v("BlockingObservable")]),e._v(") — if the source Observable completes after emitting a single item, return that item, otherwise throw an exception")]),e._v(" "),r("li",[r("a",{attrs:{href:"https://github.com/ReactiveX/RxJava/wiki/Observable-Utility-Operators",target:"_blank",rel:"noopener noreferrer"}},[r("strong",[r("code",[e._v("single( )")])]),r("OutboundLink")],1),e._v(" ("),r("code",[e._v("Observable")]),e._v(") — if the source Observable completes after emitting a single item, emit that item, otherwise notify of an exception")]),e._v(" "),r("li",[r("strong",[r("code",[e._v("singleOption( )")])]),e._v(" (scala) — "),r("em",[e._v("see "),r("a",{attrs:{href:"https://github.com/ReactiveX/RxJava/wiki/Blocking-Observable-Operators#single-and-singleordefault",target:"_blank",rel:"noopener noreferrer"}},[r("strong",[r("code",[e._v("singleOrDefault( )")])]),r("OutboundLink")],1),e._v(" ("),r("code",[e._v("BlockingObservable")]),e._v(")")])]),e._v(" "),r("li",[r("a",{attrs:{href:"https://github.com/ReactiveX/RxJava/wiki/Blocking-Observable-Operators",target:"_blank",rel:"noopener noreferrer"}},[r("strong",[r("code",[e._v("singleOrDefault( )")])]),r("OutboundLink")],1),e._v(" ("),r("code",[e._v("BlockingObservable")]),e._v(") — if the source Observable completes after emitting a single item, return that item, otherwise return a default item")]),e._v(" "),r("li",[r("a",{attrs:{href:"https://github.com/ReactiveX/RxJava/wiki/Observable-Utility-Operators",target:"_blank",rel:"noopener noreferrer"}},[r("strong",[r("code",[e._v("singleOrDefault( )")])]),r("OutboundLink")],1),e._v(" ("),r("code",[e._v("Observable")]),e._v(") — if the source Observable completes after emitting a single item, emit that item, otherwise emit a default item")]),e._v(" "),r("li",[r("strong",[r("code",[e._v("singleOrElse( )")])]),e._v(" (scala) — "),r("em",[e._v("see "),r("a",{attrs:{href:"https://github.com/ReactiveX/RxJava/wiki/Observable-Utility-Operators",target:"_blank",rel:"noopener noreferrer"}},[r("strong",[r("code",[e._v("singleOrDefault( )")])]),r("OutboundLink")],1)])]),e._v(" "),r("li",[r("strong",[r("code",[e._v("size( )")])]),e._v(" (scala) — "),r("em",[e._v("see "),r("a",{attrs:{href:"https://github.com/ReactiveX/RxJava/wiki/Mathematical-and-Aggregate-Operators#count",target:"_blank",rel:"noopener noreferrer"}},[r("strong",[r("code",[e._v("count( )")])]),r("OutboundLink")],1)])]),e._v(" "),r("li",[r("a",{attrs:{href:"https://github.com/ReactiveX/RxJava/wiki/Filtering-Observables#skip",target:"_blank",rel:"noopener noreferrer"}},[r("strong",[r("code",[e._v("skip( )")])]),r("OutboundLink")],1),e._v(" — ignore the first "),r("em",[e._v("n")]),e._v(" items emitted by an Observable")]),e._v(" "),r("li",[r("a",{attrs:{href:"https://github.com/ReactiveX/RxJava/wiki/Filtering-Observables#skiplast",target:"_blank",rel:"noopener noreferrer"}},[r("strong",[r("code",[e._v("skipLast( )")])]),r("OutboundLink")],1),e._v(" — ignore the last "),r("em",[e._v("n")]),e._v(" items emitted by an Observable")]),e._v(" "),r("li",[r("a",{attrs:{href:"https://github.com/ReactiveX/RxJava/wiki/Conditional-and-Boolean-Operators#conditional-operators",target:"_blank",rel:"noopener noreferrer"}},[r("strong",[r("code",[e._v("skipUntil( )")])]),r("OutboundLink")],1),e._v(" — discard items emitted by a source Observable until a second Observable emits an item, then emit the remainder of the source Observable's items")]),e._v(" "),r("li",[r("a",{attrs:{href:"https://github.com/ReactiveX/RxJava/wiki/Conditional-and-Boolean-Operators#conditional-operators",target:"_blank",rel:"noopener noreferrer"}},[r("strong",[r("code",[e._v("skipWhile( )")])]),r("OutboundLink")],1),e._v(" — discard items emitted by an Observable until a specified condition is false, then emit the remainder")]),e._v(" "),r("li",[r("strong",[r("code",[e._v("sliding( )")])]),e._v(" (scala) — "),r("em",[e._v("see "),r("a",{attrs:{href:"https://github.com/ReactiveX/RxJava/wiki/Transforming-Observables#window",target:"_blank",rel:"noopener noreferrer"}},[r("strong",[r("code",[e._v("window( )")])]),r("OutboundLink")],1)])]),e._v(" "),r("li",[r("strong",[r("code",[e._v("slidingBuffer( )")])]),e._v(" (scala) — "),r("em",[e._v("see "),r("a",{attrs:{href:"https://github.com/ReactiveX/RxJava/wiki/Transforming-Observables#buffer",target:"_blank",rel:"noopener noreferrer"}},[r("strong",[r("code",[e._v("buffer( )")])]),r("OutboundLink")],1)])]),e._v(" "),r("li",[r("a",{attrs:{href:"https://github.com/ReactiveX/RxJava/wiki/String-Observables",target:"_blank",rel:"noopener noreferrer"}},[r("strong",[r("code",[e._v("split( )")])]),r("OutboundLink")],1),e._v(" ("),r("code",[e._v("StringObservable")]),e._v(") — converts an Observable of Strings into an Observable of Strings that treats the source sequence as a stream and splits it on a specified regex boundary")]),e._v(" "),r("li",[r("a",{attrs:{href:"https://github.com/ReactiveX/RxJava/wiki/Async-Operators",target:"_blank",rel:"noopener noreferrer"}},[r("strong",[r("code",[e._v("start( )")])]),r("OutboundLink")],1),e._v(" — create an Observable that emits the return value of a function ("),r("code",[e._v("rxjava-async")]),e._v(")")]),e._v(" "),r("li",[r("a",{attrs:{href:"https://github.com/ReactiveX/RxJava/wiki/Phantom-Operators#fromcancellablefuture-startcancellablefuture-and-defercancellablefuture",target:"_blank",rel:"noopener noreferrer"}},[r("strong",[r("code",[e._v("startCancellableFuture( )")])]),r("OutboundLink")],1),e._v(" — convert a function that returns Future into an Observable that emits that Future's return value in a way that monitors the subscription status of the Observable to determine whether to halt work on the Future (⁇)("),r("code",[e._v("rxjava-async")]),e._v(")")]),e._v(" "),r("li",[r("a",{attrs:{href:"https://github.com/ReactiveX/RxJava/wiki/Async-Operators",target:"_blank",rel:"noopener noreferrer"}},[r("strong",[r("code",[e._v("startFuture( )")])]),r("OutboundLink")],1),e._v(" — convert a function that returns Future into an Observable that emits that Future's return value ("),r("code",[e._v("rxjava-async")]),e._v(")")]),e._v(" "),r("li",[r("a",{attrs:{href:"https://github.com/ReactiveX/RxJava/wiki/Combining-Observables#startwith",target:"_blank",rel:"noopener noreferrer"}},[r("strong",[r("code",[e._v("startWith( )")])]),r("OutboundLink")],1),e._v(" — emit a specified sequence of items before beginning to emit the items from the Observable")]),e._v(" "),r("li",[r("a",{attrs:{href:"https://github.com/ReactiveX/RxJava/wiki/String-Observables",target:"_blank",rel:"noopener noreferrer"}},[r("strong",[r("code",[e._v("stringConcat( )")])]),r("OutboundLink")],1),e._v(" ("),r("code",[e._v("StringObservable")]),e._v(") — converts an Observable that emits a sequence of strings into an Observable that emits a single string that concatenates them all")]),e._v(" "),r("li",[r("a",{attrs:{href:"https://github.com/ReactiveX/RxJava/wiki/Observable-Utility-Operators",target:"_blank",rel:"noopener noreferrer"}},[r("strong",[r("code",[e._v("subscribeOn( )")])]),r("OutboundLink")],1),e._v(" — specify which Scheduler an Observable should use when its subscription is invoked")]),e._v(" "),r("li",[r("a",{attrs:{href:"https://github.com/ReactiveX/RxJava/wiki/Mathematical-and-Aggregate-Operators#sumdouble",target:"_blank",rel:"noopener noreferrer"}},[r("strong",[r("code",[e._v("sumDouble( )")])]),r("OutboundLink")],1),e._v(" — adds the Doubles emitted by an Observable and emits this sum ("),r("code",[e._v("rxjava-math")]),e._v(")")]),e._v(" "),r("li",[r("a",{attrs:{href:"https://github.com/ReactiveX/RxJava/wiki/Mathematical-and-Aggregate-Operators#sumfloat",target:"_blank",rel:"noopener noreferrer"}},[r("strong",[r("code",[e._v("sumFloat( )")])]),r("OutboundLink")],1),e._v(" — adds the Floats emitted by an Observable and emits this sum ("),r("code",[e._v("rxjava-math")]),e._v(")")]),e._v(" "),r("li",[r("a",{attrs:{href:"https://github.com/ReactiveX/RxJava/wiki/Mathematical-and-Aggregate-Operators#sumint",target:"_blank",rel:"noopener noreferrer"}},[r("strong",[r("code",[e._v("sumInt( )")])]),r("OutboundLink")],1),e._v(" — adds the Integers emitted by an Observable and emits this sum ("),r("code",[e._v("rxjava-math")]),e._v(")")]),e._v(" "),r("li",[r("a",{attrs:{href:"https://github.com/ReactiveX/RxJava/wiki/Mathematical-and-Aggregate-Operators#sumlong",target:"_blank",rel:"noopener noreferrer"}},[r("strong",[r("code",[e._v("sumLong( )")])]),r("OutboundLink")],1),e._v(" — adds the Longs emitted by an Observable and emits this sum ("),r("code",[e._v("rxjava-math")]),e._v(")")]),e._v(" "),r("li",[r("strong",[r("code",[e._v("switch( )")])]),e._v(" (scala) — "),r("em",[e._v("see "),r("a",{attrs:{href:"https://github.com/ReactiveX/RxJava/wiki/Combining-Observables#switchonnext",target:"_blank",rel:"noopener noreferrer"}},[r("strong",[r("code",[e._v("switchOnNext( )")])]),r("OutboundLink")],1)])]),e._v(" "),r("li",[r("a",{attrs:{href:"https://github.com/ReactiveX/RxJava/wiki/Conditional-and-Boolean-Operators#conditional-operators",target:"_blank",rel:"noopener noreferrer"}},[r("strong",[r("code",[e._v("switchCase( )")])]),r("OutboundLink")],1),e._v(" — emit the sequence from a particular Observable based on the results of an evaluation ("),r("code",[e._v("contrib-computation-expressions")]),e._v(")")]),e._v(" "),r("li",[r("a",{attrs:{href:"https://github.com/ReactiveX/RxJava/wiki/Transforming-Observables#switchmap",target:"_blank",rel:"noopener noreferrer"}},[r("strong",[r("code",[e._v("switchMap( )")])]),r("OutboundLink")],1),e._v(" — transform the items emitted by an Observable into Observables, and mirror those items emitted by the most-recently transformed Observable")]),e._v(" "),r("li",[r("a",{attrs:{href:"https://github.com/ReactiveX/RxJava/wiki/Combining-Observables#switchonnext",target:"_blank",rel:"noopener noreferrer"}},[r("strong",[r("code",[e._v("switchOnNext( )")])]),r("OutboundLink")],1),e._v(" — convert an Observable that emits Observables into a single Observable that emits the items emitted by the most-recently emitted of those Observables")]),e._v(" "),r("li",[r("strong",[r("code",[e._v("synchronize( )")])]),e._v(" — "),r("em",[e._v("see "),r("a",{attrs:{href:"https://github.com/ReactiveX/RxJava/wiki/Observable-Utility-Operators",target:"_blank",rel:"noopener noreferrer"}},[r("strong",[r("code",[e._v("serialize( )")])]),r("OutboundLink")],1)])]),e._v(" "),r("li",[r("a",{attrs:{href:"https://github.com/ReactiveX/RxJava/wiki/Filtering-Observables#take",target:"_blank",rel:"noopener noreferrer"}},[r("strong",[r("code",[e._v("take( )")])]),r("OutboundLink")],1),e._v(" — emit only the first "),r("em",[e._v("n")]),e._v(" items emitted by an Observable")]),e._v(" "),r("li",[r("a",{attrs:{href:"https://github.com/ReactiveX/RxJava/wiki/Filtering-Observables",target:"_blank",rel:"noopener noreferrer"}},[r("strong",[r("code",[e._v("takeFirst( )")])]),r("OutboundLink")],1),e._v(" — emit only the first item emitted by an Observable, or the first item that meets some condition")]),e._v(" "),r("li",[r("a",{attrs:{href:"https://github.com/ReactiveX/RxJava/wiki/Filtering-Observables#takelast",target:"_blank",rel:"noopener noreferrer"}},[r("strong",[r("code",[e._v("takeLast( )")])]),r("OutboundLink")],1),e._v(" — only emit the last "),r("em",[e._v("n")]),e._v(" items emitted by an Observable")]),e._v(" "),r("li",[r("a",{attrs:{href:"https://github.com/ReactiveX/RxJava/wiki/Filtering-Observables",target:"_blank",rel:"noopener noreferrer"}},[r("strong",[r("code",[e._v("takeLastBuffer( )")])]),r("OutboundLink")],1),e._v(" — emit the last "),r("em",[e._v("n")]),e._v(" items emitted by an Observable, as a single list item")]),e._v(" "),r("li",[r("strong",[r("code",[e._v("takeRight( )")])]),e._v(" (scala) — "),r("em",[e._v("see "),r("a",{attrs:{href:"https://github.com/ReactiveX/RxJava/wiki/Filtering-Observables#last",target:"_blank",rel:"noopener noreferrer"}},[r("strong",[r("code",[e._v("last( )")])]),r("OutboundLink")],1),e._v(" ("),r("code",[e._v("Observable")]),e._v(") or "),r("a",{attrs:{href:"https://github.com/ReactiveX/RxJava/wiki/Filtering-Observables#takelast",target:"_blank",rel:"noopener noreferrer"}},[r("strong",[r("code",[e._v("takeLast( )")])]),r("OutboundLink")],1)])]),e._v(" "),r("li",[r("a",{attrs:{href:"https://github.com/ReactiveX/RxJava/wiki/Conditional-and-Boolean-Operators#conditional-operators",target:"_blank",rel:"noopener noreferrer"}},[r("strong",[r("code",[e._v("takeUntil( )")])]),r("OutboundLink")],1),e._v(" — emits the items from the source Observable until a second Observable emits an item")]),e._v(" "),r("li",[r("a",{attrs:{href:"https://github.com/ReactiveX/RxJava/wiki/Conditional-and-Boolean-Operators#conditional-operators",target:"_blank",rel:"noopener noreferrer"}},[r("strong",[r("code",[e._v("takeWhile( )")])]),r("OutboundLink")],1),e._v(" — emit items emitted by an Observable as long as a specified condition is true, then skip the remainder")]),e._v(" "),r("li",[r("strong",[r("code",[e._v("take-while( )")])]),e._v(" (clojure) — "),r("em",[e._v("see "),r("a",{attrs:{href:"https://github.com/ReactiveX/RxJava/wiki/Conditional-and-Boolean-Operators#conditional-operators",target:"_blank",rel:"noopener noreferrer"}},[r("strong",[r("code",[e._v("takeWhile( )")])]),r("OutboundLink")],1)])]),e._v(" "),r("li",[r("a",{attrs:{href:"https://github.com/ReactiveX/RxJava/wiki/Combining-Observables#rxjava-joins",target:"_blank",rel:"noopener noreferrer"}},[r("strong",[r("code",[e._v("then( )")])]),r("OutboundLink")],1),e._v(" — transform a series of "),r("code",[e._v("Pattern")]),e._v(" objects via a "),r("code",[e._v("Plan")]),e._v(" template ("),r("code",[e._v("rxjava-joins")]),e._v(")")]),e._v(" "),r("li",[r("a",{attrs:{href:"https://github.com/ReactiveX/RxJava/wiki/Filtering-Observables#throttlefirst",target:"_blank",rel:"noopener noreferrer"}},[r("strong",[r("code",[e._v("throttleFirst( )")])]),r("OutboundLink")],1),e._v(" — emit the first items emitted by an Observable within periodic time intervals")]),e._v(" "),r("li",[r("a",{attrs:{href:"https://github.com/ReactiveX/RxJava/wiki/Filtering-Observables#throttlelast",target:"_blank",rel:"noopener noreferrer"}},[r("strong",[r("code",[e._v("throttleLast( )")])]),r("OutboundLink")],1),e._v(" — emit the most recent items emitted by an Observable within periodic time intervals")]),e._v(" "),r("li",[r("a",{attrs:{href:"https://github.com/ReactiveX/RxJava/wiki/Filtering-Observables#throttlewithtimeout",target:"_blank",rel:"noopener noreferrer"}},[r("strong",[r("code",[e._v("throttleWithTimeout( )")])]),r("OutboundLink")],1),e._v(" — only emit an item from the source Observable after a particular timespan has passed without the Observable emitting any other items")]),e._v(" "),r("li",[r("strong",[r("code",[e._v("throw( )")])]),e._v(" (clojure) — "),r("em",[e._v("see "),r("a",{attrs:{href:"https://github.com/ReactiveX/RxJava/wiki/Creating-Observables#error",target:"_blank",rel:"noopener noreferrer"}},[r("strong",[r("code",[e._v("error( )")])]),r("OutboundLink")],1)])]),e._v(" "),r("li",[r("a",{attrs:{href:"https://github.com/ReactiveX/RxJava/wiki/Observable-Utility-Operators",target:"_blank",rel:"noopener noreferrer"}},[r("strong",[r("code",[e._v("timeInterval( )")])]),r("OutboundLink")],1),e._v(" — emit the time lapsed between consecutive emissions of a source Observable")]),e._v(" "),r("li",[r("a",{attrs:{href:"https://github.com/ReactiveX/RxJava/wiki/Filtering-Observables#timeout",target:"_blank",rel:"noopener noreferrer"}},[r("strong",[r("code",[e._v("timeout( )")])]),r("OutboundLink")],1),e._v(" — emit items from a source Observable, but issue an exception if no item is emitted in a specified timespan")]),e._v(" "),r("li",[r("a",{attrs:{href:"https://github.com/ReactiveX/RxJava/wiki/Creating-Observables#timer",target:"_blank",rel:"noopener noreferrer"}},[r("strong",[r("code",[e._v("timer( )")])]),r("OutboundLink")],1),e._v(" — create an Observable that emits a single item after a given delay")]),e._v(" "),r("li",[r("a",{attrs:{href:"https://github.com/ReactiveX/RxJava/wiki/Observable-Utility-Operators",target:"_blank",rel:"noopener noreferrer"}},[r("strong",[r("code",[e._v("timestamp( )")])]),r("OutboundLink")],1),e._v(" — attach a timestamp to every item emitted by an Observable")]),e._v(" "),r("li",[r("a",{attrs:{href:"https://github.com/ReactiveX/RxJava/wiki/Async-Operators",target:"_blank",rel:"noopener noreferrer"}},[r("strong",[r("code",[e._v("toAsync( )")])]),r("OutboundLink")],1),e._v(" — convert a function or Action into an Observable that executes the function and emits its return value ("),r("code",[e._v("rxjava-async")]),e._v(")")]),e._v(" "),r("li",[r("a",{attrs:{href:"https://github.com/ReactiveX/RxJava/wiki/Blocking-Observable-Operators",target:"_blank",rel:"noopener noreferrer"}},[r("strong",[r("code",[e._v("toBlocking( )")])]),r("OutboundLink")],1),e._v(" — transform an Observable into a BlockingObservable")]),e._v(" "),r("li",[r("strong",[r("code",[e._v("toBlockingObservable( )")])]),e._v(" - "),r("em",[e._v("see "),r("a",{attrs:{href:"https://github.com/ReactiveX/RxJava/wiki/Blocking-Observable-Operators",target:"_blank",rel:"noopener noreferrer"}},[r("strong",[r("code",[e._v("toBlocking( )")])]),r("OutboundLink")],1)])]),e._v(" "),r("li",[r("a",{attrs:{href:"https://github.com/ReactiveX/RxJava/wiki/Blocking-Observable-Operators",target:"_blank",rel:"noopener noreferrer"}},[r("strong",[r("code",[e._v("toFuture( )")])]),r("OutboundLink")],1),e._v(" — convert the Observable into a Future")]),e._v(" "),r("li",[r("a",{attrs:{href:"https://github.com/ReactiveX/RxJava/wiki/Blocking-Observable-Operators",target:"_blank",rel:"noopener noreferrer"}},[r("strong",[r("code",[e._v("toIterable( )")])]),r("OutboundLink")],1),e._v(" — convert the sequence emitted by the Observable into an Iterable")]),e._v(" "),r("li",[r("strong",[r("code",[e._v("toIterator( )")])]),e._v(" — "),r("em",[e._v("see "),r("a",{attrs:{href:"https://github.com/ReactiveX/RxJava/wiki/Blocking-Observable-Operators",target:"_blank",rel:"noopener noreferrer"}},[r("strong",[r("code",[e._v("getIterator( )")])]),r("OutboundLink")],1)])]),e._v(" "),r("li",[r("a",{attrs:{href:"https://github.com/ReactiveX/RxJava/wiki/Mathematical-and-Aggregate-Operators#tolist",target:"_blank",rel:"noopener noreferrer"}},[r("strong",[r("code",[e._v("toList( )")])]),r("OutboundLink")],1),e._v(" — collect all items from an Observable and emit them as a single List")]),e._v(" "),r("li",[r("a",{attrs:{href:"https://github.com/ReactiveX/RxJava/wiki/Mathematical-and-Aggregate-Operators#tomap",target:"_blank",rel:"noopener noreferrer"}},[r("strong",[r("code",[e._v("toMap( )")])]),r("OutboundLink")],1),e._v(" — convert the sequence of items emitted by an Observable into a map keyed by a specified key function")]),e._v(" "),r("li",[r("a",{attrs:{href:"https://github.com/ReactiveX/RxJava/wiki/Mathematical-and-Aggregate-Operators#tomultimap",target:"_blank",rel:"noopener noreferrer"}},[r("strong",[r("code",[e._v("toMultimap( )")])]),r("OutboundLink")],1),e._v(" — convert the sequence of items emitted by an Observable into an ArrayList that is also a map keyed by a specified key function")]),e._v(" "),r("li",[r("strong",[r("code",[e._v("toSeq( )")])]),e._v(" (scala) — "),r("em",[e._v("see "),r("a",{attrs:{href:"https://github.com/ReactiveX/RxJava/wiki/Mathematical-and-Aggregate-Operators#tolist",target:"_blank",rel:"noopener noreferrer"}},[r("strong",[r("code",[e._v("toList( )")])]),r("OutboundLink")],1)])]),e._v(" "),r("li",[r("a",{attrs:{href:"https://github.com/ReactiveX/RxJava/wiki/Mathematical-and-Aggregate-Operators#tosortedlist",target:"_blank",rel:"noopener noreferrer"}},[r("strong",[r("code",[e._v("toSortedList( )")])]),r("OutboundLink")],1),e._v(" — collect all items from an Observable and emit them as a single, sorted List")]),e._v(" "),r("li",[r("strong",[r("code",[e._v("tumbling( )")])]),e._v(" (scala) — "),r("em",[e._v("see "),r("a",{attrs:{href:"https://github.com/ReactiveX/RxJava/wiki/Transforming-Observables#window",target:"_blank",rel:"noopener noreferrer"}},[r("strong",[r("code",[e._v("window( )")])]),r("OutboundLink")],1)])]),e._v(" "),r("li",[r("strong",[r("code",[e._v("tumblingBuffer( )")])]),e._v(" (scala) — "),r("em",[e._v("see "),r("a",{attrs:{href:"https://github.com/ReactiveX/RxJava/wiki/Transforming-Observables#buffer",target:"_blank",rel:"noopener noreferrer"}},[r("strong",[r("code",[e._v("buffer( )")])]),r("OutboundLink")],1)])]),e._v(" "),r("li",[r("a",{attrs:{href:"https://github.com/ReactiveX/RxJava/wiki/Observable-Utility-Operators",target:"_blank",rel:"noopener noreferrer"}},[r("strong",[r("code",[e._v("using( )")])]),r("OutboundLink")],1),e._v(" — create a disposable resource that has the same lifespan as an Observable")]),e._v(" "),r("li",[r("a",{attrs:{href:"https://github.com/ReactiveX/RxJava/wiki/Combining-Observables#rxjava-joins",target:"_blank",rel:"noopener noreferrer"}},[r("strong",[r("code",[e._v("when( )")])]),r("OutboundLink")],1),e._v(" — convert a series of "),r("code",[e._v("Plan")]),e._v(" objects into an Observable ("),r("code",[e._v("rxjava-joins")]),e._v(")")]),e._v(" "),r("li",[r("strong",[r("code",[e._v("where( )")])]),e._v(" — "),r("em",[e._v("see: "),r("a",{attrs:{href:"https://github.com/ReactiveX/RxJava/wiki/Filtering-Observables#filter",target:"_blank",rel:"noopener noreferrer"}},[r("strong",[r("code",[e._v("filter( )")])]),r("OutboundLink")],1)])]),e._v(" "),r("li",[r("a",{attrs:{href:"https://github.com/ReactiveX/RxJava/wiki/Conditional-and-Boolean-Operators#conditional-operators",target:"_blank",rel:"noopener noreferrer"}},[r("strong",[r("code",[e._v("whileDo( )")])]),r("OutboundLink")],1),e._v(" — if a condition is true, emit the source Observable's sequence and then repeat the sequence as long as the condition remains true ("),r("code",[e._v("contrib-computation-expressions")]),e._v(")")]),e._v(" "),r("li",[r("a",{attrs:{href:"https://github.com/ReactiveX/RxJava/wiki/Transforming-Observables#window",target:"_blank",rel:"noopener noreferrer"}},[r("strong",[r("code",[e._v("window( )")])]),r("OutboundLink")],1),e._v(" — periodically subdivide items from an Observable into Observable windows and emit these windows rather than emitting the items one at a time")]),e._v(" "),r("li",[r("a",{attrs:{href:"https://github.com/ReactiveX/RxJava/wiki/Combining-Observables#zip",target:"_blank",rel:"noopener noreferrer"}},[r("strong",[r("code",[e._v("zip( )")])]),r("OutboundLink")],1),e._v(" — combine sets of items emitted by two or more Observables together via a specified function and emit items based on the results of this function")]),e._v(" "),r("li",[r("strong",[r("code",[e._v("zipWith( )")])]),e._v(" — "),r("em",[e._v("instance version of "),r("a",{attrs:{href:"https://github.com/ReactiveX/RxJava/wiki/Combining-Observables#zip",target:"_blank",rel:"noopener noreferrer"}},[r("strong",[r("code",[e._v("zip( )")])]),r("OutboundLink")],1)])]),e._v(" "),r("li",[r("strong",[r("code",[e._v("zipWithIndex( )")])]),e._v(" (scala) — "),r("em",[e._v("see "),r("a",{attrs:{href:"https://github.com/ReactiveX/RxJava/wiki/Combining-Observables#zip",target:"_blank",rel:"noopener noreferrer"}},[r("strong",[r("code",[e._v("zip( )")])]),r("OutboundLink")],1)])]),e._v(" "),r("li",[r("strong",[r("code",[e._v("++")])]),e._v(" (scala) — "),r("em",[e._v("see "),r("a",{attrs:{href:"https://github.com/ReactiveX/RxJava/wiki/Mathematical-and-Aggregate-Operators",target:"_blank",rel:"noopener noreferrer"}},[r("strong",[r("code",[e._v("concat( )")])]),r("OutboundLink")],1)])]),e._v(" "),r("li",[r("strong",[r("code",[e._v("+:")])]),e._v(" (scala) — "),r("em",[e._v("see "),r("a",{attrs:{href:"https://github.com/ReactiveX/RxJava/wiki/Combining-Observables#startwith",target:"_blank",rel:"noopener noreferrer"}},[r("strong",[r("code",[e._v("startWith( )")])]),r("OutboundLink")],1)])])])])}),[],!1,null,null,null);t.default=o.exports}}]);