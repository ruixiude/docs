(window.webpackJsonp=window.webpackJsonp||[]).push([[60],{417:function(t,e,n){"use strict";n.r(e);var s=n(42),a=Object(s.a)({},(function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[n("h1",{attrs:{id:"自定义扩展"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#自定义扩展"}},[t._v("#")]),t._v(" 自定义扩展")]),t._v(" "),n("p",[t._v("目前 Mars 支持自定义 xlog 的加密部分和长短连协议加解包部分。需要强调的是想要自定义这些扩展，需要在本地编译 Mars 才可以，编译方法见 "),n("a",{attrs:{href:"https://github.com/Tencent/mars/wiki/Mars-Android-%E6%8E%A5%E5%85%A5%E6%8C%87%E5%8D%97#%E6%9C%AC%E5%9C%B0%E7%BC%96%E8%AF%91",target:"_blank",rel:"noopener noreferrer"}},[t._v("Mars Android 接入指南"),n("OutboundLink")],1),t._v(" 和 "),n("a",{attrs:{href:"https://github.com/Tencent/mars/wiki/Mars-iOS%EF%BC%8FOS-X-%E6%8E%A5%E5%85%A5%E6%8C%87%E5%8D%97",target:"_blank",rel:"noopener noreferrer"}},[t._v("Mars iOS/OS X 接入指南"),n("OutboundLink")],1),t._v(" 中的编译部分。切记，在自定义实现时，"),n("strong",[t._v("可以增加函数，但是不能删除头文件中已有的函数，也不能修改头文件中的函数原型。")])]),t._v(" "),n("h2",{attrs:{id:"自定义-xlog-加密"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#自定义-xlog-加密"}},[t._v("#")]),t._v(" 自定义 xlog 加密")]),t._v(" "),n("p",[t._v("xlog 的具体实现可以参考[微信终端跨平台组件 Mars 系列（一） - 高性能日志模块 xlog] (http://mp.weixin.qq.com/s/cnhuEodJGIbdodh0IxNeXQ)")]),t._v(" "),n("p",[t._v("在自定义日志加密算法前，先来了解一下日志的结构：")]),t._v(" "),n("blockquote",[n("p",[t._v("|magic start(char)|seq(uint16_t)|begin hour(char)|end hour(char)|length(uint32_t)|crypt key(uint32_t)|"),n("strong",[t._v("log")]),t._v("|magic end(char)|")])]),t._v(" "),n("p",[t._v("以上结构为一个日志结构体，在 Xlog.AppednerModeSync (同步模式)下，每写一行日志都会组装成一个日志结构体写入到日志文件中。在 Xlog.AppednerModeAsync (异步模式)下，mmap 中的数据是是一个日志结构体，每当往 mmap 中写入一行日志数据时，同时会修改结构体中的 length 的值。")]),t._v(" "),n("p",[t._v("所以结构体中有四部分是不能去除的：magic start、length、log、magic end。其他部分可以根据需要增减。")]),t._v(" "),n("p",[t._v("日志默认是提供 ecdh +tea的混合加密算法，具体使用方法见 Xlog 加密指引。如果你只是想更改加密算法的话，只需要修改两个函数(注意，老版本是需要单独把log_crypt.h和log_crypt.cc文件单独复制到上层代码里实现。最新版本已经不需要这么做)：")]),t._v(" "),n("div",{staticClass:"language-c++ line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("void CryptSyncLog(const char* const _log_data, size_t _input_len, char* _output, size_t& _output_len);\nvoid CryptAsyncLog(const char* const _log_data, size_t _input_len, char* _output, size_t& _output_len);\n")])]),t._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[t._v("1")]),n("br"),n("span",{staticClass:"line-number"},[t._v("2")]),n("br")])]),n("p",[t._v("自定义加密算法后，一定要修改解密 xlog 的 python 脚本。修改python的解压逻辑需要注意：因为日志是先压缩后再让你重定义加密的，所以解密脚本中需要先解密再解压，而且需要注意解密脚本中有两种类型：同步日志和异步日志，注意和你的加密算法对应上。")]),t._v(" "),n("h2",{attrs:{id:"自定义长连加解包"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#自定义长连加解包"}},[t._v("#")]),t._v(" 自定义长连加解包")]),t._v(" "),n("p",[t._v("长连的加包是在 Req2Buf 之后进行的，也即长连的 body 是 Req2Buf 得到的数据，长连的头部是加包上去的。加解包自定义实现可以在这两个函数中进行实现：")]),t._v(" "),n("div",{staticClass:"language-c++ line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("void (*longlink_pack)(uint32_t _cmdid, uint32_t _seq, const AutoBuffer& _body, const AutoBuffer& _extension, AutoBuffer& _packed, longlink_tracker* _tracker);\nint  (*longlink_unpack)(const AutoBuffer& _packed, uint32_t& _cmdid, uint32_t& _seq, size_t& _package_len, AutoBuffer& _body, AutoBuffer& _extension, longlink_tracker* _tracker);\n")])]),t._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[t._v("1")]),n("br"),n("span",{staticClass:"line-number"},[t._v("2")]),n("br")])]),n("p",[t._v("同时这里还可以针对心跳包(noop)进行自定义，默认的心跳包是只有一个长连接头部，没有 body 部分。")]),t._v(" "),n("div",{staticClass:"language-c++ line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("uint32_t (*longlink_noop_cmdid)();\nbool  (*longlink_noop_isresp)(uint32_t _taskid, uint32_t _cmdid, uint32_t _recv_seq, const AutoBuffer& _body, const AutoBuffer& _extend);\nvoid (*longlink_noop_req_body)(AutoBuffer& _body, AutoBuffer& _extend);\nvoid (*longlink_noop_resp_body)(const AutoBuffer& _body, const AutoBuffer& _extend);\n")])]),t._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[t._v("1")]),n("br"),n("span",{staticClass:"line-number"},[t._v("2")]),n("br"),n("span",{staticClass:"line-number"},[t._v("3")]),n("br"),n("span",{staticClass:"line-number"},[t._v("4")]),n("br")])]),n("h2",{attrs:{id:"自定义长连复合连接连接阶段是否需要心跳包验证"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#自定义长连复合连接连接阶段是否需要心跳包验证"}},[t._v("#")]),t._v(" 自定义长连复合连接连接阶段是否需要心跳包验证")]),t._v(" "),n("div",{staticClass:"language-c++ line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("bool (*longlink_complexconnect_need_verify)();\n")])]),t._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[t._v("1")]),n("br")])]),n("h2",{attrs:{id:"自定义短连加解包"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#自定义短连加解包"}},[t._v("#")]),t._v(" 自定义短连加解包")]),t._v(" "),n("p",[t._v("和长连一样，短连的加包也是在 Req2Buf 之后进行的，也即短连的 body 是 Req2Buf 得到的数据，短连的头部是加包上去的。即使修改短连的加包逻辑也请只在 HTTP 协议基础上增减字段，建议不要改为其他协议，因为本身短连就是为了弥补长连私有协议的请求可能被中间设备丢掉而做的。")]),t._v(" "),n("div",{staticClass:"language-c++ line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("void (*shortlink_pack)(const std::string& _url, const std::map<std::string, std::string>& _headers, const AutoBuffer& _body, const AutoBuffer& _extension, AutoBuffer& _out_buff, shortlink_tracker* _tracker);\n")])]),t._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[t._v("1")]),n("br")])]),n("h2",{attrs:{id:"自定义心跳包的间隔"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#自定义心跳包的间隔"}},[t._v("#")]),t._v(" 自定义心跳包的间隔")]),t._v(" "),n("div",{staticClass:"language-c++ line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("uint32_t (*longlink_noop_interval)();\n")])]),t._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[t._v("1")]),n("br")])]),n("p",[t._v("默认为 0，会走 Mars 自带的逻辑。若想自定义，该值给大于 0 的值即可，单位为 ms ,例如你想自定义 1min 的心跳间隔，需返回值 1"),n("em",[t._v("60")]),t._v("1000。")]),t._v(" "),n("h2",{attrs:{id:"已经固定的几种协议"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#已经固定的几种协议"}},[t._v("#")]),t._v(" 已经固定的几种协议")]),t._v(" "),n("p",[t._v("目前Mars中已经固定了几种协议：")]),t._v(" "),n("ol",[n("li",[t._v("心跳包 cmdid = 6 可在 longlink_packer.cc 自定义")]),t._v(" "),n("li",[t._v("signalling cmdid = 243。 cmdid 的值可在 longlink_packer.cc 自定义。该功能不主动调用不会触发。")]),t._v(" "),n("li",[t._v("push 数据包。默认 seq = 0 会被认为是 push 数据包，可在 longlink_packer.cc 自定义。")])]),t._v(" "),n("p",[t._v("注意自定义时不要与以上三种有冲突。")])])}),[],!1,null,null,null);e.default=a.exports}}]);