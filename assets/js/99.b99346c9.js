(window.webpackJsonp=window.webpackJsonp||[]).push([[99],{456:function(e,t,r){"use strict";r.r(t);var o=r(42),s=Object(o.a)({},(function(){var e=this,t=e.$createElement,r=e._self._c||t;return r("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[r("h1",{attrs:{id:"connections"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#connections"}},[e._v("#")]),e._v(" Connections")]),e._v(" "),r("p",[e._v("Although you provide only the URL, OkHttp plans its connection to your webserver using three types: URL, Address, and Route.")]),e._v(" "),r("h2",{attrs:{id:"urls"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#urls"}},[e._v("#")]),e._v(" URLs")]),e._v(" "),r("p",[e._v("URLs (like "),r("code",[e._v("https://github.com/square/okhttp")]),e._v(") are fundamental to HTTP and the Internet. In addition to being a universal, decentralized naming scheme for everything on the web, they also specify how to access web resources.")]),e._v(" "),r("p",[e._v("URLs are abstract:")]),e._v(" "),r("ul",[r("li",[e._v("They specify that the call may be plaintext ("),r("code",[e._v("http")]),e._v(") or encrypted ("),r("code",[e._v("https")]),e._v("), but not which cryptographic algorithms should be used. Nor do they specify how to verify the peer's certificates (the "),r("a",{attrs:{href:"http://developer.android.com/reference/javax/net/ssl/HostnameVerifier.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("HostnameVerifier"),r("OutboundLink")],1),e._v(") or which certificates can be trusted (the "),r("a",{attrs:{href:"http://developer.android.com/reference/org/apache/http/conn/ssl/SSLSocketFactory.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("SSLSocketFactory"),r("OutboundLink")],1),e._v(").")]),e._v(" "),r("li",[e._v("They don't specify whether a specific proxy server should be used or how to authenticate with that proxy server.")])]),e._v(" "),r("p",[e._v("They're also concrete: each URL identifies a specific path (like "),r("code",[e._v("/square/okhttp")]),e._v(") and query (like "),r("code",[e._v("?q=sharks&lang=en")]),e._v("). Each webserver hosts many URLs.")]),e._v(" "),r("h2",{attrs:{id:"addresses"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#addresses"}},[e._v("#")]),e._v(" Addresses")]),e._v(" "),r("p",[e._v("Addresses specify a webserver (like "),r("code",[e._v("github.com")]),e._v(") and all of the "),r("strong",[e._v("static")]),e._v(" configuration necessary to connect to that server: the port number, HTTPS settings, and preferred network protocols (like HTTP/2 or SPDY).")]),e._v(" "),r("p",[e._v("URLs that share the same address may also share the same underlying TCP socket connection. Sharing a connection has substantial performance benefits: lower latency, higher throughput (due to "),r("a",{attrs:{href:"http://www.igvita.com/2011/10/20/faster-web-vs-tcp-slow-start/",target:"_blank",rel:"noopener noreferrer"}},[e._v("TCP slow start"),r("OutboundLink")],1),e._v(") and conserved battery. OkHttp uses a "),r("a",{attrs:{href:"http://square.github.io/okhttp/4.x/okhttp/okhttp3/-connection-pool/",target:"_blank",rel:"noopener noreferrer"}},[e._v("ConnectionPool"),r("OutboundLink")],1),e._v(" that automatically reuses HTTP/1.x connections and multiplexes HTTP/2 and SPDY connections.")]),e._v(" "),r("p",[e._v("In OkHttp some fields of the address come from the URL (scheme, hostname, port) and the rest come from the "),r("a",{attrs:{href:"http://square.github.io/okhttp/4.x/okhttp/okhttp3/-ok-http-client/",target:"_blank",rel:"noopener noreferrer"}},[e._v("OkHttpClient"),r("OutboundLink")],1),e._v(".")]),e._v(" "),r("h2",{attrs:{id:"routes"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#routes"}},[e._v("#")]),e._v(" Routes")]),e._v(" "),r("p",[e._v("Routes supply the "),r("strong",[e._v("dynamic")]),e._v(" information necessary to actually connect to a webserver. This is the specific IP address to attempt (as discovered by a DNS query), the exact proxy server to use (if a "),r("a",{attrs:{href:"http://developer.android.com/reference/java/net/ProxySelector.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("ProxySelector"),r("OutboundLink")],1),e._v(" is in use), and which version of TLS to negotiate (for HTTPS connections).")]),e._v(" "),r("p",[e._v("There may be many routes for a single address. For example, a webserver that is hosted in multiple datacenters may yield multiple IP addresses in its DNS response.")]),e._v(" "),r("h2",{attrs:{id:"connections-2"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#connections-2"}},[e._v("#")]),e._v(" Connections")]),e._v(" "),r("p",[e._v("When you request a URL with OkHttp, here's what it does:")]),e._v(" "),r("ol",[r("li",[e._v("It uses the URL and configured OkHttpClient to create an "),r("strong",[e._v("address")]),e._v(". This address specifies how we'll connect to the webserver.")]),e._v(" "),r("li",[e._v("It attempts to retrieve a connection with that address from the "),r("strong",[e._v("connection pool")]),e._v(".")]),e._v(" "),r("li",[e._v("If it doesn't find a connection in the pool, it selects a "),r("strong",[e._v("route")]),e._v(" to attempt. This usually means making a DNS request to get the server's IP addresses. It then selects a TLS version and proxy server if necessary.")]),e._v(" "),r("li",[e._v("If it's a new route, it connects by building either a direct socket connection, a TLS tunnel (for HTTPS over an HTTP proxy), or a direct TLS connection. It does TLS handshakes as necessary.")]),e._v(" "),r("li",[e._v("It sends the HTTP request and reads the response.")])]),e._v(" "),r("p",[e._v("If there's a problem with the connection, OkHttp will select another route and try again. This allows OkHttp to recover when a subset of a server's addresses are unreachable. It's also useful when a pooled connection is stale or if the attempted TLS version is unsupported.")]),e._v(" "),r("p",[e._v("Once the response has been received, the connection will be returned to the pool so it can be reused for a future request. Connections are evicted from the pool after a period of inactivity.")])])}),[],!1,null,null,null);t.default=s.exports}}]);