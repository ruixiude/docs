(window.webpackJsonp=window.webpackJsonp||[]).push([[84],{443:function(t,s,e){"use strict";e.r(s);var n=e(42),a=Object(n.a)({},(function(){var t=this,s=t.$createElement,e=t._self._c||s;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("h1",{attrs:{id:"custom-types"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#custom-types"}},[t._v("#")]),t._v(" Custom Types")]),t._v(" "),e("p",[t._v("How to store types in ObjectBox that are not supported by default, recommendations for storing enums.")]),t._v(" "),e("h2",{attrs:{id:"objectbox-supported-types"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#objectbox-supported-types"}},[t._v("#")]),t._v(" ObjectBox - Supported Types")]),t._v(" "),e("p",[t._v("With ObjectBox you can store pretty much any type (class), given that it can be converted to any of the built-in types.")]),t._v(" "),e("p",[t._v("ObjectBox can store the following built-in types without a converter:")]),t._v(" "),e("tabs",[e("tab",{attrs:{name:"Java"}},[e("div",{staticClass:"language-java line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-java"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("boolean")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Boolean")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Integer")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("short")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Short")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("long")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Long")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("float")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Float")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("double")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Double")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("byte")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Byte")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("char")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Character")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("byte")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Date")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Time with millisecond precision.")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// As of 3.0.0-alpha2 the following work out of the box:")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@Type")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("DateNano")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("long")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Long")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Time with nanosecond precision.")]),t._v("\n")])]),t._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[t._v("1")]),e("br"),e("span",{staticClass:"line-number"},[t._v("2")]),e("br"),e("span",{staticClass:"line-number"},[t._v("3")]),e("br"),e("span",{staticClass:"line-number"},[t._v("4")]),e("br"),e("span",{staticClass:"line-number"},[t._v("5")]),e("br"),e("span",{staticClass:"line-number"},[t._v("6")]),e("br"),e("span",{staticClass:"line-number"},[t._v("7")]),e("br"),e("span",{staticClass:"line-number"},[t._v("8")]),e("br"),e("span",{staticClass:"line-number"},[t._v("9")]),e("br"),e("span",{staticClass:"line-number"},[t._v("10")]),e("br"),e("span",{staticClass:"line-number"},[t._v("11")]),e("br"),e("span",{staticClass:"line-number"},[t._v("12")]),e("br"),e("span",{staticClass:"line-number"},[t._v("13")]),e("br"),e("span",{staticClass:"line-number"},[t._v("14")]),e("br"),e("span",{staticClass:"line-number"},[t._v("15")]),e("br")])])]),t._v(" "),e("tab",{attrs:{name:"Kotlin"}},[e("div",{staticClass:"language-kotlin line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-kotlin"}},[e("code",[t._v("Boolean"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" Boolean"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("?")]),t._v("\nInt"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" Int"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("?")]),t._v("\nShort"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" Short"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("?")]),t._v("\nLong"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" Long"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("?")]),t._v("\nFloat"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" Float"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("?")]),t._v("\nDouble"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" Double"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("?")]),t._v("\nByte"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" Byte"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("?")]),t._v("\nChar"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" Char"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("?")]),t._v("\nByteArray\nString"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" String"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("?")]),t._v("\nDate"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" Date"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("?")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Time with millisecond precision.")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// As of 3.0.0-alpha2 the following work out of the box:")]),t._v("\nArray"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("String"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token annotation builtin"}},[t._v("@Type")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("DateNano"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" Long"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" Long"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("?")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Time with nanosecond precision.")]),t._v("\n")])]),t._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[t._v("1")]),e("br"),e("span",{staticClass:"line-number"},[t._v("2")]),e("br"),e("span",{staticClass:"line-number"},[t._v("3")]),e("br"),e("span",{staticClass:"line-number"},[t._v("4")]),e("br"),e("span",{staticClass:"line-number"},[t._v("5")]),e("br"),e("span",{staticClass:"line-number"},[t._v("6")]),e("br"),e("span",{staticClass:"line-number"},[t._v("7")]),e("br"),e("span",{staticClass:"line-number"},[t._v("8")]),e("br"),e("span",{staticClass:"line-number"},[t._v("9")]),e("br"),e("span",{staticClass:"line-number"},[t._v("10")]),e("br"),e("span",{staticClass:"line-number"},[t._v("11")]),e("br"),e("span",{staticClass:"line-number"},[t._v("12")]),e("br"),e("span",{staticClass:"line-number"},[t._v("13")]),e("br"),e("span",{staticClass:"line-number"},[t._v("14")]),e("br"),e("span",{staticClass:"line-number"},[t._v("15")]),e("br")])])])],1),t._v(" "),e("p",[t._v("To store any other type, configure a converter like shown below.")]),t._v(" "),e("h2",{attrs:{id:"convert-annotation-and-property-converter"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#convert-annotation-and-property-converter"}},[t._v("#")]),t._v(" Convert annotation and property converter")]),t._v(" "),e("p",[t._v("To add support for a custom type, you can map properties to one of the built-in types using a "),e("strong",[t._v("@Convert")]),t._v(" annotation. You also need to provide a "),e("code",[t._v("PropertyConverter")]),t._v(" implementation.")]),t._v(" "),e("p",[t._v("For example, you could define a color in your entity using a custom "),e("code",[t._v("Color")]),t._v(" class and map it to an "),e("code",[t._v("Integer")]),t._v(". Or you can map the popular "),e("code",[t._v("org.joda.time.DateTime")]),t._v(" from Joda Time to a "),e("code",[t._v("Long")]),t._v(".")]),t._v(" "),e("p",[t._v("Here is an example mapping an "),e("code",[t._v("enum")]),t._v(" to an "),e("code",[t._v("Integer")]),t._v(":")]),t._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("@Entity\npublic class User {\n    @Id\n    private Long id;\n    \n    @Convert(converter = RoleConverter.class, dbType = Integer.class)\n    private Role role;\n    \n    public enum Role {\n        DEFAULT(0), AUTHOR(1), ADMIN(2);\n        \n        final int id;\n        \n        Role(int id) {\n            this.id = id;\n        }\n    }\n\n    public static class RoleConverter implements PropertyConverter<Role, Integer>; {\n        @Override\n        public Role convertToEntityProperty(Integer databaseValue) {\n            if (databaseValue == null) {\n                return null;\n            }\n            for (Role role : Role.values()) {\n                if (role.id == databaseValue) {\n                    return role;\n                }\n            }\n            return Role.DEFAULT;\n        }\n    \n        @Override\n        public Integer convertToDatabaseValue(Role entityProperty) {\n            return entityProperty == null ? null : entityProperty.id;\n        }\n    }\n}\n")])]),t._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[t._v("1")]),e("br"),e("span",{staticClass:"line-number"},[t._v("2")]),e("br"),e("span",{staticClass:"line-number"},[t._v("3")]),e("br"),e("span",{staticClass:"line-number"},[t._v("4")]),e("br"),e("span",{staticClass:"line-number"},[t._v("5")]),e("br"),e("span",{staticClass:"line-number"},[t._v("6")]),e("br"),e("span",{staticClass:"line-number"},[t._v("7")]),e("br"),e("span",{staticClass:"line-number"},[t._v("8")]),e("br"),e("span",{staticClass:"line-number"},[t._v("9")]),e("br"),e("span",{staticClass:"line-number"},[t._v("10")]),e("br"),e("span",{staticClass:"line-number"},[t._v("11")]),e("br"),e("span",{staticClass:"line-number"},[t._v("12")]),e("br"),e("span",{staticClass:"line-number"},[t._v("13")]),e("br"),e("span",{staticClass:"line-number"},[t._v("14")]),e("br"),e("span",{staticClass:"line-number"},[t._v("15")]),e("br"),e("span",{staticClass:"line-number"},[t._v("16")]),e("br"),e("span",{staticClass:"line-number"},[t._v("17")]),e("br"),e("span",{staticClass:"line-number"},[t._v("18")]),e("br"),e("span",{staticClass:"line-number"},[t._v("19")]),e("br"),e("span",{staticClass:"line-number"},[t._v("20")]),e("br"),e("span",{staticClass:"line-number"},[t._v("21")]),e("br"),e("span",{staticClass:"line-number"},[t._v("22")]),e("br"),e("span",{staticClass:"line-number"},[t._v("23")]),e("br"),e("span",{staticClass:"line-number"},[t._v("24")]),e("br"),e("span",{staticClass:"line-number"},[t._v("25")]),e("br"),e("span",{staticClass:"line-number"},[t._v("26")]),e("br"),e("span",{staticClass:"line-number"},[t._v("27")]),e("br"),e("span",{staticClass:"line-number"},[t._v("28")]),e("br"),e("span",{staticClass:"line-number"},[t._v("29")]),e("br"),e("span",{staticClass:"line-number"},[t._v("30")]),e("br"),e("span",{staticClass:"line-number"},[t._v("31")]),e("br"),e("span",{staticClass:"line-number"},[t._v("32")]),e("br"),e("span",{staticClass:"line-number"},[t._v("33")]),e("br"),e("span",{staticClass:"line-number"},[t._v("34")]),e("br"),e("span",{staticClass:"line-number"},[t._v("35")]),e("br"),e("span",{staticClass:"line-number"},[t._v("36")]),e("br"),e("span",{staticClass:"line-number"},[t._v("37")]),e("br"),e("span",{staticClass:"line-number"},[t._v("38")]),e("br")])]),e("h3",{attrs:{id:"things-to-look-out-for"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#things-to-look-out-for"}},[t._v("#")]),t._v(" Things to look out for")]),t._v(" "),e("p",[t._v("If you define your custom type or converter "),e("strong",[t._v("inside your entity class")]),t._v(", they have to be "),e("strong",[t._v("static")]),t._v(".")]),t._v(" "),e("p",[t._v("Don’t forget to "),e("strong",[t._v("handle null values")]),t._v(" correctly – usually you should return null if the input is null.")]),t._v(" "),e("p",[t._v("Database types in the sense of the converter are the primitive Java types offered by ObjectBox, as mentioned in the beginning. It is recommended to "),e("strong",[t._v("use a primitive type that is easily convertible")]),t._v(" (int, long, byte array, String, …).")]),t._v(" "),e("p",[t._v("You must "),e("strong",[t._v("not interact with the database")]),t._v(" (such as using "),e("code",[t._v("Box")]),t._v(" or "),e("code",[t._v("BoxStore")]),t._v(") inside the converter. The converter methods are called within a transaction, so for example getting or putting entities to a box will fail.")]),t._v(" "),e("blockquote",[e("p",[t._v("Note: For optimal performance, "),e("strong",[t._v("ObjectBox will use a single converter instance")]),t._v(" for all conversions. Make sure the converter does not have any other constructor besides the parameter-less default constructor. Also, make it thread safe, because it might be called concurrently on multiple entities.")])]),t._v(" "),e("h2",{attrs:{id:"list-array-types"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#list-array-types"}},[t._v("#")]),t._v(" List/Array types")]),t._v(" "),e("p",[t._v("You can use a converter with List types. For example, you could convert a List of Strings to a JSON array resulting in a single string for the database. At the moment it is not possible to use an array with converters (you can track this "),e("a",{attrs:{href:"https://github.com/greenrobot/ObjectBox/issues/42",target:"_blank",rel:"noopener noreferrer"}},[t._v("feature request"),e("OutboundLink")],1),t._v(").")]),t._v(" "),e("h2",{attrs:{id:"how-to-convert-enums-correctly"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#how-to-convert-enums-correctly"}},[t._v("#")]),t._v(" How to convert Enums correctly")]),t._v(" "),e("p",[t._v("Enums are popular with data objects like entities. When persisting enums, there are a couple of best practices:")]),t._v(" "),e("ul",[e("li",[e("strong",[t._v("Do not persist the enum’s ordinal or name:")]),t._v(" Both are unstable, and can easily change the next time you edit your enum definitions.")]),t._v(" "),e("li",[e("strong",[t._v("Use stable ids:")]),t._v(" Define a custom property (integer or string) in your enum that is guaranteed to be stable. Use this for your persistence mapping.")]),t._v(" "),e("li",[e("strong",[t._v("Prepare for the unknown:")]),t._v(" Define an UNKNOWN enum value. It can serve to handle null or unknown values. This will allow you to handle cases like an old enum value getting removed without crashing your app.")])]),t._v(" "),e("h2",{attrs:{id:"custom-types-in-queries"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#custom-types-in-queries"}},[t._v("#")]),t._v(" Custom types in queries")]),t._v(" "),e("p",[e("code",[t._v("QueryBuilder")]),t._v(" is unaware of custom types. You have to "),e("strong",[t._v("use the primitive DB type for queries")]),t._v(".")]),t._v(" "),e("p",[t._v("So for the Role example above you would get users with the role of admin with the query condition "),e("code",[t._v(".equal(UserProperties.Role, 2)")]),t._v(".")])],1)}),[],!1,null,null,null);s.default=a.exports}}]);